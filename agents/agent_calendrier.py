# -*- coding: utf-8 -*-

# Importations n√©cessaires pour la gestion des dates, du syst√®me de fichiers et de l'API Google
import datetime
import os.path
import logging

# Importations sp√©cifiques √† l'authentification et √† l'API Google
from google.auth.transport.requests import Request
from google.oauth2.credentials import Credentials
from google_auth_oauthlib.flow import InstalledAppFlow
from googleapiclient.discovery import build
from googleapiclient.errors import HttpError

# On importe les fonctions des autres agents dont on a besoin
from .agent_taches import lister_taches
from .agent_projets import lister_projets

# Les "scopes" d√©finissent les permissions que nous demandons.
# Ici, nous demandons la permission de lire et √©crire sur le calendrier.
SCOPES = ['https://www.googleapis.com/auth/calendar']
logger = logging.getLogger(__name__)

def _get_credentials():
    """G√®re l'authentification et retourne les credentials valides."""
    creds = None
    logger.debug("üìÖ CALENDRIER: V√©rification des identifiants Google.")
    if os.path.exists('token.json'):
        creds = Credentials.from_authorized_user_file('token.json', SCOPES)
    if not creds or not creds.valid:
        if creds and creds.expired and creds.refresh_token:
            logger.info("üìÖ CALENDRIER: Rafra√Æchissement du jeton d'acc√®s Google...")
            creds.refresh(Request())
        else:
            logger.info("üìÖ CALENDRIER: Lancement du flux d'authentification utilisateur pour Google Calendar...")
            flow = InstalledAppFlow.from_client_secrets_file('credentials.json', SCOPES)
            creds = flow.run_local_server(port=0)
        with open('token.json', 'w') as token:
            logger.info("‚úÖ CALENDRIER: Nouveaux identifiants Google sauvegard√©s dans token.json.")
            token.write(creds.to_json())
    return creds

def lister_tous_les_calendriers() -> list:
    """R√©cup√®re la liste de tous les calendriers de l'utilisateur avec leur niveau d'acc√®s."""
    logger.info("üìÖ CALENDRIER: R√©cup√©ration de la liste de tous les calendriers et des permissions.")
    try:
        creds = _get_credentials()
        service = build('calendar', 'v3', credentials=creds)
        calendar_list = service.calendarList().list().execute()
        
        formatted_list = []
        for calendar_item in calendar_list.get('items', []):
            formatted_list.append({
                "id": calendar_item['id'],
                "summary": calendar_item['summary'],
                "primary": calendar_item.get('primary', False),
                "access_role": calendar_item.get('accessRole') # owner, writer, reader
            })
        return formatted_list
    except Exception as e:
        logger.error(f"üî• CALENDRIER: Erreur lors de la r√©cup√©ration de la liste des calendriers: {e}")
        return [{"erreur": str(e)}]

def lister_prochains_evenements(nombre_evenements: int = 10, nom_calendrier: str = None) -> list:
    """
    Liste les 'n' prochains √©v√©nements. Si nom_calendrier est sp√©cifi√©,
    cherche dans ce calendrier. Sinon, cherche dans tous les calendriers.
    """
    log_msg = f"üìÖ CALENDRIER: R√©cup√©ration des {nombre_evenements} prochains √©v√©nements"
    if nom_calendrier:
        log_msg += f" dans le calendrier '{nom_calendrier}'."
    else:
        log_msg += " dans tous les calendriers."
    logger.info(log_msg)
    try:
        creds = _get_credentials()
        service = build('calendar', 'v3', credentials=creds)
        now = datetime.datetime.utcnow().isoformat() + 'Z'
        
        calendar_ids_to_check = []
        if nom_calendrier:
            all_calendars = lister_tous_les_calendriers()
            target_calendar = next((c for c in all_calendars if nom_calendrier.lower() in c['summary'].lower()), None)
            if not target_calendar:
                return [{"erreur": f"Calendrier '{nom_calendrier}' non trouv√©."}]
            calendar_ids_to_check.append(target_calendar['id'])
        else:
            # Si aucun nom n'est donn√©, on scanne tout
            all_calendars = lister_tous_les_calendriers()
            calendar_ids_to_check = [c['id'] for c in all_calendars]

        all_events = []
        for calendar_id in calendar_ids_to_check:
            events_result = service.events().list(
                calendarId=calendar_id, timeMin=now,
                maxResults=nombre_evenements, singleEvents=True,
                orderBy='startTime'
            ).execute()
            events = events_result.get('items', [])
            for event in events:
                event['calendar_summary'] = next((c['summary'] for c in all_calendars if c['id'] == calendar_id), 'Inconnu')
            all_events.extend(events)

        # Trier tous les √©v√©nements de tous les calendriers par date de d√©but
        all_events.sort(key=lambda x: x['start'].get('dateTime', x['start'].get('date')))
        
        # Formatter les 'n' prochains √©v√©nements
        formatted_events = []
        for event in all_events[:nombre_evenements]:
            start = event['start'].get('dateTime', event['start'].get('date'))
            formatted_events.append({
                "id": event['id'],
                "summary": event['summary'],
                "start": start,
                "calendar": event['calendar_summary']
            })
        return formatted_events

    except Exception as e:
        logger.error(f"üî• CALENDRIER: Erreur lors de la r√©cup√©ration des √©v√©nements: {e}")
        return [{"erreur": str(e)}]

def creer_evenement_calendrier(titre: str, date_heure_debut: str, date_heure_fin: str) -> dict:
    """
    Cr√©e un √©v√©nement.
    Si le titre correspond √† la description d'une t√¢che existante, il cherche le
    calendrier associ√© au projet de cette t√¢che et l'utilise.
    Sinon, il utilise le calendrier principal ('primary').
    """
    logger.info("üìÖ CALENDRIER: Tentative de cr√©ation de l'√©v√©nement '%s'.", titre)
    nom_calendrier_cible = None

    # Logique pour trouver le calendrier associ√© via la t√¢che/projet
    taches = lister_taches()
    tache_correspondante = next((t for t in taches if t['description'].lower() == titre.lower()), None)
    
    if tache_correspondante and tache_correspondante.get('projet_id'):
        projets = lister_projets()
        projet_associe = next((p for p in projets if p['id'] == tache_correspondante['projet_id']), None)
        if projet_associe and projet_associe.get('calendrier_associe'):
            nom_calendrier_cible = projet_associe['calendrier_associe']
            logger.info(f"üß† CALENDRIER: T√¢che trouv√©e. Utilisation du calendrier '{nom_calendrier_cible}' du projet '{projet_associe['nom']}'.")

    try:
        creds = _get_credentials()
        service = build('calendar', 'v3', credentials=creds)
        
        calendar_id = 'primary'  # Par d√©faut
        if nom_calendrier_cible:
            all_calendars = lister_tous_les_calendriers()
            target_calendar = next((c for c in all_calendars if nom_calendrier_cible.lower() in c['summary'].lower()), None)
            if target_calendar:
                calendar_id = target_calendar['id']
            else:
                logger.warning(f"‚ö†Ô∏è CALENDRIER: Calendrier '{nom_calendrier_cible}' non trouv√©, utilisation du calendrier principal.")

        event = {
            'summary': titre,
            'start': {'dateTime': date_heure_debut, 'timeZone': 'Europe/Paris'},
            'end': {'dateTime': date_heure_fin, 'timeZone': 'Europe/Paris'},
        }
        
        created_event = service.events().insert(calendarId=calendar_id, body=event).execute()
        logger.info("‚úÖ CALENDRIER: √âv√©nement '%s' cr√©√© avec succ√®s.", titre)
        return {"succes": f"√âv√©nement '{titre}' cr√©√©."}
    except Exception as e:
        logger.error(f"üî• CALENDRIER: Erreur lors de la cr√©ation de l'√©v√©nement: {e}")
        return {"erreur": str(e)}

def modifier_evenement_calendrier(event_id: str, nouveau_titre: str = None, nouvelle_date_heure_debut: str = None, nouvelle_date_heure_fin: str = None) -> dict:
    """Modifie un √©v√©nement existant en se basant sur son ID, en le cherchant uniquement dans les calendriers modifiables."""
    logger.info("üìÖ CALENDRIER: Tentative de modification de l'√©v√©nement ID '%s' sur les calendriers modifiables.", event_id)
    try:
        creds = _get_credentials()
        service = build('calendar', 'v3', credentials=creds)
        
        # On ne cherche que dans les calendriers o√π on a les droits d'√©criture
        all_calendars = lister_tous_les_calendriers()
        writable_calendars = [c for c in all_calendars if c.get('access_role') in ['writer', 'owner']]
        if not writable_calendars:
            logger.warning("‚ö†Ô∏è CALENDRIER: Aucune calendrier modifiable trouv√© pour ce compte.")
            return {"erreur": "Aucun calendrier modifiable n'a √©t√© trouv√©."}

        for calendar in writable_calendars:
            calendar_id = calendar['id']
            try:
                # √âtape 1: V√©rifier si l'√©v√©nement est dans ce calendrier
                event = service.events().get(calendarId=calendar_id, eventId=event_id).execute()

                # Si on arrive ici, on a trouv√© l'√©v√©nement. On le modifie.
                # √âtape 2: Mettre √† jour les champs
                if nouveau_titre:
                    event['summary'] = nouveau_titre
                if nouvelle_date_heure_debut:
                    event['start']['dateTime'] = nouvelle_date_heure_debut
                if nouvelle_date_heure_fin:
                    event['end']['dateTime'] = nouvelle_date_heure_fin

                # √âtape 3: Envoyer la mise √† jour
                updated_event = service.events().update(calendarId=calendar_id, eventId=event['id'], body=event).execute()
                
                logger.info("‚úÖ CALENDRIER: √âv√©nement ID '%s' modifi√© avec succ√®s dans le calendrier '%s'.", event_id, calendar['summary'])
                return {"succes": f"√âv√©nement '{updated_event['summary']}' mis √† jour."}

            except HttpError as e:
                # Si 404, l'√©v√©nement n'est pas dans CE calendrier, on continue silencieusement.
                if e.resp.status == 404:
                    continue
                # Si c'est une autre erreur (ex: permissions malgr√© le filtre, rare), on logue.
                logger.error(f"üî• CALENDRIER: Erreur HTTP en modifiant l'√©v√©nement ID '{event_id}' dans le calendrier '{calendar['summary']}': {e}")
                # On ne retourne pas l'erreur tout de suite, on continue d'essayer les autres calendriers.

        # Si on a parcouru tous les calendriers sans trouver l'√©v√©nement
        logger.error("üî• CALENDRIER: Impossible de modifier, √©v√©nement introuvable (ID: %s) dans les calendriers modifiables.", event_id)
        return {"erreur": "√âv√©nement non trouv√© dans vos calendriers modifiables."}

    except Exception as e:
        logger.error(f"üî• CALENDRIER: Erreur inattendue lors de la modification de l'√©v√©nement: {e}")
        return {"erreur": str(e)}

def supprimer_evenement_calendrier(event_id: str) -> dict:
    """Supprime un √©v√©nement en se basant sur son ID, en le cherchant uniquement dans les calendriers modifiables."""
    logger.info("üìÖ CALENDRIER: Tentative de suppression de l'√©v√©nement ID '%s' sur les calendriers modifiables.", event_id)
    try:
        creds = _get_credentials()
        service = build('calendar', 'v3', credentials=creds)

        # On ne prend que les calendriers o√π on a les droits d'√©criture.
        all_calendars = lister_tous_les_calendriers()
        writable_calendars = [c for c in all_calendars if c.get('access_role') in ['writer', 'owner']]

        if not writable_calendars:
            logger.warning("‚ö†Ô∏è CALENDRIER: Aucun calendrier modifiable trouv√© pour ce compte.")
            return {"erreur": "Aucun calendrier modifiable n'a √©t√© trouv√©."}

        for calendar in writable_calendars:
            calendar_id = calendar['id']
            try:
                service.events().delete(calendarId=calendar_id, eventId=event_id).execute()
                # Si la suppression r√©ussit, on log, on retourne le succ√®s et on arr√™te la fonction.
                logger.info("‚úÖ CALENDRIER: √âv√©nement ID '%s' supprim√© avec succ√®s du calendrier '%s'.", event_id, calendar['summary'])
                return {"succes": f"L'√©v√©nement avec l'ID {event_id} a √©t√© supprim√©."}
            except HttpError as e:
                # Si l'erreur est 404 (introuvable) ou 410 (d√©j√† supprim√©), on continue la recherche.
                if e.resp.status in [404, 410]:
                    continue
                # Si c'est une autre erreur (ex: 403 Forbidden malgr√© notre filtre), on logue et on continue.
                logger.error(f"üî• CALENDRIER: Erreur HTTP en supprimant l'√©v√©nement ID '{event_id}' du calendrier '{calendar['summary']}': {e}")
        
        # Si on a termin√© la boucle sans succ√®s, l'√©v√©nement n'a √©t√© trouv√© dans aucun calendrier modifiable.
        logger.warning("‚ö†Ô∏è CALENDRIER: Tentative de suppression d'un √©v√©nement introuvable (ID: %s) dans les calendriers modifiables.", event_id)
        return {"erreur": "√âv√©nement non trouv√© ou d√©j√† supprim√© dans vos calendriers modifiables."}

    except Exception as e:
        logger.error(f"üî• CALENDRIER: Erreur inattendue lors de la suppression de l'√©v√©nement: {e}")
        return {"erreur": str(e)}

# Ce bloc s'ex√©cute uniquement si on lance ce fichier directement (pour tester).
if __name__ == '__main__':
    evenements = lister_prochains_evenements()
    if evenements:
        print("\n--- Vos prochains √©v√©nements ---")
        for ev in evenements:
            print(ev)
        print("-----------------------------\n")
