# -*- coding: utf-8 -*-

import os
import json
# On importe la nouvelle biblioth√®que de Google
import google.generativeai as genai
# On importe le convertisseur pour les logs
# from google.generativeai.types import to_dict
import datetime
import logging

# Importation de TOUTES les fonctions de nos agents, qui deviendront des "outils" pour l'IA
from .agent_taches import (
    ajouter_tache, lister_taches, modifier_tache,
    supprimer_tache, changer_statut_tache,
    reorganiser_taches, # On importe le nouvel outil
    ajouter_sous_tache, lister_sous_taches, modifier_sous_tache,
    supprimer_sous_tache, changer_statut_sous_tache,
    lier_tache_a_evenement
)
from .agent_projets import (
    ajouter_projet, lister_projets, modifier_projet, supprimer_projet,
    activer_suivi_projet, desactiver_suivi_projet
)
from .agent_calendrier import (
    lister_prochains_evenements, creer_evenement_calendrier, modifier_evenement_calendrier,
    supprimer_evenement_calendrier, lister_tous_les_calendriers,
    creer_calendrier, renommer_calendrier, supprimer_calendrier
)
# On importe le nouvel agent !
from .agent_apprentissage import (
    enregistrer_apprentissage, consulter_apprentissage, lister_apprentissages, supprimer_apprentissage
)

# --- Configuration ---
# On configure l'API Google Gemini
try:
    genai.configure(api_key=os.getenv("GOOGLE_API_KEY"))
    logger = logging.getLogger(__name__)
    logger.info("‚úÖ API Google Gemini configur√©e avec succ√®s.")
except Exception as e:
    # Cette log est cruciale si la cl√© API est manquante sur Railway
    logging.getLogger(__name__).error(f"üî• ERREUR: Impossible de configurer Google GenAI. La cl√© GOOGLE_API_KEY est-elle bien d√©finie dans les variables d'environnement ? Erreur: {e}")

# --- Traducteur d'Outils et Mapping ---

# On garde la d√©finition originale des outils qui est plus lisible
# NOTE : Les types sont maintenant directement en MAJUSCULES pour √™tre compatibles avec Gemini.
gemini_tools = [
    # Outils pour les T√¢ches
    {"type": "function", "function": {"name": "lister_taches", "description": "Obtenir la liste de toutes les t√¢ches, tri√©es par priorit√© (P1, P2...) puis par ordre personnalis√©."}},
    {"type": "function", "function": {"name": "ajouter_tache", "description": "Ajouter une nouvelle t√¢che. L'importance et l'urgence peuvent √™tre sp√©cifi√©es.", "parameters": {"type": "OBJECT", "properties": {"description": {"type": "STRING", "description": "Description de la t√¢che."}, "nom_projet": {"type": "STRING", "description": "Optionnel. Nom du projet associ√©."}, "important": {"type": "BOOLEAN", "description": "La t√¢che est-elle importante ?"}, "urgent": {"type": "BOOLEAN", "description": "La t√¢che est-elle urgente ?"}, "date_echeance": {"type": "STRING", "description": "Optionnel. Date et heure d'√©ch√©ance de la t√¢che au format ISO 8601 (YYYY-MM-DDTHH:MM:SS)."}}, "required": ["description"]}}},
    {"type": "function", "function": {"name": "modifier_tache", "description": "Modifier une t√¢che (description, projet, importance, urgence). La priorit√© sera recalcul√©e automatiquement.", "parameters": {"type": "OBJECT", "properties": {"description_actuelle": {"type": "STRING", "description": "Description actuelle de la t√¢che √† modifier."}, "nouvelle_description": {"type": "STRING", "description": "Optionnel. La nouvelle description de la t√¢che."}, "nom_projet": {"type": "STRING", "description": "Optionnel. Le nouveau nom du projet pour la t√¢che."}, "nouvelle_importance": {"type": "BOOLEAN", "description": "Optionnel. Le nouveau statut d'importance."}, "nouvelle_urgence": {"type": "BOOLEAN", "description": "Optionnel. Le nouveau statut d'urgence."}, "nouvelle_date_echeance": {"type": "STRING", "description": "Optionnel. La nouvelle date et heure d'√©ch√©ance au format ISO 8601 (YYYY-MM-DDTHH:MM:SS)."}}, "required": ["description_actuelle"]}}},
    {"type": "function", "function": {"name": "changer_statut_tache", "description": "Changer le statut d'une t√¢che (√† faire, en cours, termin√©e).", "parameters": {"type": "OBJECT", "properties": {"description_tache": {"type": "STRING", "description": "Description de la t√¢che √† modifier."}, "nouveau_statut": {"type": "STRING", "description": "Le nouveau statut."}}, "required": ["description_tache", "nouveau_statut"]}}},
    {"type": "function", "function": {"name": "supprimer_tache", "description": "Supprimer une t√¢che.", "parameters": {"type": "OBJECT", "properties": {"description_tache": {"type": "STRING", "description": "Description de la t√¢che √† supprimer."}}, "required": ["description_tache"]}}},
    {"type": "function", "function": {"name": "reorganiser_taches", "description": "Change l'ordre des t√¢ches au sein d'un m√™me niveau de priorit√© (P1, P2, P3, ou P4).", "parameters": {"type": "OBJECT", "properties": {"priorite_cible": {"type": "STRING", "description": "Le niveau de priorit√© √† r√©organiser ('P1', 'P2', 'P3' ou 'P4')."}, "descriptions_ordonnees": {"type": "ARRAY", "items": {"type": "STRING"}, "description": "La liste des descriptions de t√¢ches, dans le nouvel ordre souhait√©."}}, "required": ["priorite_cible", "descriptions_ordonnees"]}}},
    {"type": "function", "function": {"name": "lier_tache_a_evenement", "description": "Interne: Associe un ID d'√©v√©nement Google Calendar √† une t√¢che apr√®s sa cr√©ation.", "parameters": {"type": "OBJECT", "properties": {"id_tache": {"type": "STRING", "description": "ID de la t√¢che √† lier."}, "id_evenement": {"type": "STRING", "description": "ID de l'√©v√©nement Google Calendar √† lier."}}, "required": ["id_tache", "id_evenement"]}}},
    
    # Outils pour les Sous-T√¢ches
    {"type": "function", "function": {"name": "ajouter_sous_tache", "description": "Ajouter une sous-t√¢che √† une t√¢che existante.", "parameters": {"type": "OBJECT", "properties": {"description_tache_parent": {"type": "STRING", "description": "Description de la t√¢che parent √† laquelle ajouter la sous-t√¢che."}, "description_sous_tache": {"type": "STRING", "description": "Description de la nouvelle sous-t√¢che."}, "important": {"type": "BOOLEAN", "description": "La sous-t√¢che est-elle importante ?"}, "urgent": {"type": "BOOLEAN", "description": "La sous-t√¢che est-elle urgente ?"}}, "required": ["description_tache_parent", "description_sous_tache"]}}},
    {"type": "function", "function": {"name": "lister_sous_taches", "description": "Lister toutes les sous-t√¢ches d'une t√¢che parent, tri√©es par priorit√©.", "parameters": {"type": "OBJECT", "properties": {"description_tache_parent": {"type": "STRING", "description": "Description de la t√¢che parent dont on veut voir les sous-t√¢ches."}}, "required": ["description_tache_parent"]}}},
    {"type": "function", "function": {"name": "modifier_sous_tache", "description": "Modifier une sous-t√¢che existante (description, importance, urgence).", "parameters": {"type": "OBJECT", "properties": {"description_tache_parent": {"type": "STRING", "description": "Description de la t√¢che parent."}, "description_sous_tache_actuelle": {"type": "STRING", "description": "Description actuelle de la sous-t√¢che √† modifier."}, "nouvelle_description": {"type": "STRING", "description": "Optionnel. La nouvelle description de la sous-t√¢che."}, "nouvelle_importance": {"type": "BOOLEAN", "description": "Optionnel. Le nouveau statut d'importance."}, "nouvelle_urgence": {"type": "BOOLEAN", "description": "Optionnel. Le nouveau statut d'urgence."}}, "required": ["description_tache_parent", "description_sous_tache_actuelle"]}}},
    {"type": "function", "function": {"name": "changer_statut_sous_tache", "description": "Changer le statut d'une sous-t√¢che (√† faire, en cours, termin√©e).", "parameters": {"type": "OBJECT", "properties": {"description_tache_parent": {"type": "STRING", "description": "Description de la t√¢che parent."}, "description_sous_tache": {"type": "STRING", "description": "Description de la sous-t√¢che."}, "nouveau_statut": {"type": "STRING", "description": "Le nouveau statut de la sous-t√¢che."}}, "required": ["description_tache_parent", "description_sous_tache", "nouveau_statut"]}}},
    {"type": "function", "function": {"name": "supprimer_sous_tache", "description": "Supprimer une sous-t√¢che d'une t√¢che parent.", "parameters": {"type": "OBJECT", "properties": {"description_tache_parent": {"type": "STRING", "description": "Description de la t√¢che parent."}, "description_sous_tache": {"type": "STRING", "description": "Description de la sous-t√¢che √† supprimer."}}, "required": ["description_tache_parent", "description_sous_tache"]}}},
    
    # Outils pour les Projets
    {"type": "function", "function": {"name": "lister_projets", "description": "Obtenir la liste de tous les projets avec leurs d√©tails complets (ID, nom, description, calendrier_associe, emoji, et si le suivi proactif est activ√©)."}},
    {"type": "function", "function": {"name": "ajouter_projet", "description": "Cr√©er un nouveau projet. Une description, un calendrier et un √©moji peuvent √™tre sp√©cifi√©s.", "parameters": {"type": "OBJECT", "properties": {"nom": {"type": "STRING", "description": "Le nom du nouveau projet."}, "description": {"type": "STRING", "description": "Optionnel. Une description d√©taill√©e des objectifs du projet."}, "calendrier_associe": {"type": "STRING", "description": "Optionnel. Le nom du Google Calendar li√© √† ce projet."}, "emoji": {"type": "STRING", "description": "Optionnel. Un √©moji unique pour repr√©senter le projet (ex: 'üöÄ')."}}, "required": ["nom"]}}},
    {"type": "function", "function": {"name": "modifier_projet", "description": "Mettre √† jour le nom, la description, le calendrier ou l'√©moji d'un projet existant via son ID.", "parameters": {"type": "OBJECT", "properties": {"id_projet": {"type": "STRING", "description": "ID du projet √† modifier."}, "nouveau_nom": {"type": "STRING", "description": "Optionnel. Le nouveau nom du projet."}, "nouvelle_description": {"type": "STRING", "description": "Optionnel. La nouvelle description compl√®te du projet."}, "nouveau_calendrier": {"type": "STRING", "description": "Optionnel. Le nouveau nom du calendrier Google √† associer."}, "nouvel_emoji": {"type": "STRING", "description": "Optionnel. Le nouvel √©moji pour le projet."}}, "required": ["id_projet"]}}},
    {"type": "function", "function": {"name": "supprimer_projet", "description": "Supprimer un projet.", "parameters": {"type": "OBJECT", "properties": {"nom": {"type": "STRING", "description": "Nom du projet √† supprimer."}}, "required": ["nom"]}}},
    
    # Outils pour le Calendrier
    {"type": "function", "function": {"name": "lister_tous_les_calendriers", "description": "Obtenir la liste de tous les calendriers Google de l'utilisateur."}},
    {"type": "function", "function": {"name": "lister_prochains_evenements", "description": "Obtenir les prochains √©v√©nements. Peut chercher dans un calendrier sp√©cifique ou dans tous.", "parameters": {"type": "OBJECT", "properties": {"nom_calendrier": {"type": "STRING", "description": "Optionnel. Le nom du calendrier √† consulter."}}}}},
    {"type": "function", "function": {"name": "creer_evenement_calendrier", "description": "Cr√©e un nouvel √©v√©nement dans le calendrier. Tu dois OBLIGATOIREMENT sp√©cifier une heure de d√©but ET de fin.", "parameters": {"type": "OBJECT", "properties": {"titre": {"type": "STRING", "description": "Titre de l'√©v√©nement. Utiliser la description exacte d'une t√¢che si possible."}, "date_heure_debut": {"type": "STRING", "description": "Date et heure de d√©but au format ISO 8601 (YYYY-MM-DDTHH:MM:SS)."}, "date_heure_fin": {"type": "STRING", "description": "Date et heure de fin au format ISO 8601 (YYYY-MM-DDTHH:MM:SS)."}, "nom_calendrier_cible": {"type": "STRING", "description": "Optionnel. Si ce param√®tre est fourni, l'√©v√©nement sera cr√©√© dans ce calendrier sp√©cifique, ignorant toute autre logique d'association."}}, "required": ["titre", "date_heure_debut", "date_heure_fin"]}}},
    {"type": "function", "function": {"name": "modifier_evenement_calendrier", "description": "Modifier un √©v√©nement existant (titre, d√©but, fin, calendrier) via son ID.", "parameters": {"type": "OBJECT", "properties": {"event_id": {"type": "STRING", "description": "ID de l'√©v√©nement √† modifier."}, "nouveau_titre": {"type": "STRING", "description": "Optionnel. Le nouveau titre de l'√©v√©nement."}, "nouvelle_date_heure_debut": {"type": "STRING", "description": "Optionnel. La nouvelle date et heure de d√©but au format ISO 8601."}, "nouvelle_date_heure_fin": {"type": "STRING", "description": "Optionnel. La nouvelle date et heure de fin au format ISO 8601."}, "nouveau_nom_calendrier": {"type": "STRING", "description": "Optionnel. Le nom du calendrier de destination pour d√©placer l'√©v√©nement."}}, "required": ["event_id"]}}},
    {"type": "function", "function": {"name": "supprimer_evenement_calendrier", "description": "Supprimer un √©v√©nement du calendrier avec son ID.", "parameters": {"type": "OBJECT", "properties": {"event_id": {"type": "STRING", "description": "ID de l'√©v√©nement √† supprimer."}}, "required": ["event_id"]}}},

    # Outils pour la GESTION des CALENDRIERS
    {"type": "function", "function": {"name": "creer_calendrier", "description": "Cr√©er un tout nouveau calendrier.", "parameters": {"type": "OBJECT", "properties": {"nom_calendrier": {"type": "STRING", "description": "Le nom du nouveau calendrier √† cr√©er."}}, "required": ["nom_calendrier"]}}},
    {"type": "function", "function": {"name": "renommer_calendrier", "description": "Changer le nom d'un calendrier existant.", "parameters": {"type": "OBJECT", "properties": {"nom_actuel": {"type": "STRING", "description": "Le nom actuel du calendrier √† renommer."}, "nouveau_nom": {"type": "STRING", "description": "Le nouveau nom pour le calendrier."}}, "required": ["nom_actuel", "nouveau_nom"]}}},
    {"type": "function", "function": {"name": "supprimer_calendrier", "description": "Supprimer d√©finitivement un calendrier. Cette action est irr√©versible.", "parameters": {"type": "OBJECT", "properties": {"nom_calendrier": {"type": "STRING", "description": "Le nom du calendrier √† supprimer."}}, "required": ["nom_calendrier"]}}},
    
    # NOUVEAUX Outils pour la M√©moire Persistante (Apprentissage)
    {"type": "function", "function": {"name": "enregistrer_apprentissage", "description": "M√©morise une information importante fournie par l'utilisateur (pr√©f√©rence, d√©cision, fait). Utiliser une cl√© simple et une valeur claire. Ex: (cle='habitude_sport', valeur='Lundi et Mercredi soir').", "parameters": {"type": "OBJECT", "properties": {"cle": {"type": "STRING", "description": "La cl√© ou le nom de l'information √† m√©moriser. Doit √™tre unique et descriptive."}, "valeur": {"type": "STRING", "description": "L'information ou la valeur √† enregistrer."}}, "required": ["cle", "valeur"]}}},
    {"type": "function", "function": {"name": "consulter_apprentissage", "description": "Consulte une information sp√©cifique dans la m√©moire en utilisant sa cl√©.", "parameters": {"type": "OBJECT", "properties": {"cle": {"type": "STRING", "description": "La cl√© de l'information √† retrouver."}}, "required": ["cle"]}}},
    {"type": "function", "function": {"name": "lister_apprentissages", "description": "Affiche la totalit√© de ce que l'assistant a appris (toutes les paires cl√©-valeur m√©moris√©es)."}},
    {"type": "function", "function": {"name": "supprimer_apprentissage", "description": "Oublie (supprime) une information de la m√©moire en utilisant sa cl√©.", "parameters": {"type": "OBJECT", "properties": {"cle": {"type": "STRING", "description": "La cl√© de l'information √† supprimer."}}, "required": ["cle"]}}},
]

# Mapping complet des outils
available_functions = {
    "lister_taches": lister_taches, "ajouter_tache": ajouter_tache, "modifier_tache": modifier_tache, "supprimer_tache": supprimer_tache, "changer_statut_tache": changer_statut_tache,
    "reorganiser_taches": reorganiser_taches, # On ajoute la fonction au mapping
    "lier_tache_a_evenement": lier_tache_a_evenement,
    "ajouter_sous_tache": ajouter_sous_tache, "lister_sous_taches": lister_sous_taches, "modifier_sous_tache": modifier_sous_tache, "supprimer_sous_tache": supprimer_sous_tache, "changer_statut_sous_tache": changer_statut_sous_tache,
    "lister_projets": lister_projets, "ajouter_projet": ajouter_projet, "modifier_projet": modifier_projet, "supprimer_projet": supprimer_projet,
    "lister_prochains_evenements": lister_prochains_evenements, "creer_evenement_calendrier": creer_evenement_calendrier, "modifier_evenement_calendrier": modifier_evenement_calendrier, "supprimer_evenement_calendrier": supprimer_evenement_calendrier,
    "lister_tous_les_calendriers": lister_tous_les_calendriers,
    "creer_calendrier": creer_calendrier, "renommer_calendrier": renommer_calendrier, "supprimer_calendrier": supprimer_calendrier,
    # On ajoute les nouvelles fonctions au mapping
    "enregistrer_apprentissage": enregistrer_apprentissage, "consulter_apprentissage": consulter_apprentissage, "lister_apprentissages": lister_apprentissages, "supprimer_apprentissage": supprimer_apprentissage,
}

# NOUVELLE FONCTION DE LOG S√âCURIS√âE
def _log_history(history: list) -> str:
    """
    Tente de convertir l'historique en JSON pour les logs.
    En cas d'√©chec (objets non s√©rialisables), retourne un r√©sum√© s√ªr pour √©viter un crash.
    """
    try:
        # Tente la conversion normale
        return json.dumps(history, indent=2, ensure_ascii=False)
    except TypeError:
        # En cas d'√©chec, on retourne une cha√Æne de caract√®res qui ne fera jamais planter le log
        return f"L'historique contient {len(history)} messages (certains objets ne sont pas s√©rialisables en JSON)."

def generer_analyse_situation():
    """G√©n√®re un r√©sum√© textuel de la situation (projets, t√¢ches, stats)."""
    # Cette fonction pourrait √™tre enrichie pour g√©n√©rer un prompt d'analyse plus complexe
    # mais pour l'instant, on se contente de signaler que la logique est ici.
    taches = lister_taches()
    projets = lister_projets()
    evenements = lister_prochains_evenements(5)

    # Ici, au lieu d'appeler l'IA (puisque c'est elle qui nous a appel√©s), 
    # on formate simplement les informations. L'intelligence est d√©j√† dans le choix de la fonction.
    return f"""
    --- Rapport de Situation ---
    
    Projets: {len(projets)}
    T√¢ches: {len(taches)}
    √âv√©nements √† venir: {len(evenements)}

    (Cette section peut √™tre enrichie pour une analyse plus d√©taill√©e sans re-appeler l'IA)
    """

def generer_contexte_complet(date_actuelle: str):
    """
    G√©n√®re un contexte complet (prompt syst√®me) pour l'IA, incluant
    la situation actuelle (t√¢ches, projets), les le√ßons apprises et la personnalit√© de l'assistant.
    """
    logger.info("üß† CONTEXTE: G√©n√©ration du contexte complet pour l'IA...")

    # On r√©cup√®re l'analyse de la situation (t√¢ches, projets, etc.)
    analyse = generer_analyse_situation()
    
    # On r√©cup√®re les le√ßons apprises
    apprentissages = lister_apprentissages()

    # On formate les apprentissages pour les inclure dans le prompt
    partie_apprentissages = ""
    if apprentissages and isinstance(apprentissages, dict):
        # On s'assure qu'on a un dictionnaire non vide
        apprentissages_formattes = "\n".join([f"- {cle}: {valeur}" for cle, valeur in apprentissages.items()])
        partie_apprentissages = f"""
### Le√ßons Apprises et Pr√©f√©rences (M√©moire)
Voici les informations et pr√©f√©rences que tu as enregistr√©es pour t'en souvenir :
{apprentissages_formattes}
"""

    prompt_systeme = f"""
# R√àGLES IMP√âRATIVES
1.  **L'ORDRE DE L'UTILISATEUR EST LA PRIORIT√â ABSOLUE :** Quand tu sugg√®res la prochaine t√¢che √† effectuer, tu dois OBLIGATOIREMENT suivre l'ordre num√©rique (1, 2, 3...) des t√¢ches P1, puis P2, etc. N'utilise JAMAIS ta propre logique pour outrepasser cet ordre. Biensur si tu vois une incoh√©rence ou tu as mieux √† proposer tu peux sugg√©rer mais tu dois √™tre conscient de sa volont√©
2.  **V√âRIFICATION DES FAITS :** Avant de mentionner un projet, v√©rifie scrupuleusement le nom du projet associ√© √† la t√¢che dans le contexte que tu as re√ßu. Ne jamais inventer ou supposer une association.
3.  **Z√âRO BAVARDAGE :** N'annonce JAMAIS ce que tu vas faire. Ne dis jamais "Je vais v√©rifier...", "Un instant...", "Laissez-moi regarder...". Agis en silence.
4.  **ACTION D'ABORD :** Ta premi√®re r√©ponse √† une requ√™te utilisateur doit TOUJOURS √™tre un appel d'outil (une `function_call`), sauf si la question est une salutation simple ou une conversation hors-sujet.
5.  **R√âPONSE FINALE UNIQUEMENT :** Ne fournis une r√©ponse textuelle que lorsque tu as rassembl√© TOUTES les informations n√©cessaires et que tu as la r√©ponse compl√®te et d√©finitive.

# GESTION INTELLIGENTE DE LA DUR√âE DES √âV√âNEMENTS
- **Principe : La dur√©e n'est JAMAIS fix√©e √† 1h par d√©faut.** Tu dois estimer la dur√©e la plus logique.
- **Processus de r√©flexion :**
    1. **Analyse le titre et le contexte :** Une "R√©union rapide" dure 30 min. Un "Atelier de travail" dure 3h. Une "Session de sport" dure 1h30. Utilise le bon sens et le contexte de la conversation.
    2. **Consulte l'agenda :** Avant de proposer un cr√©neau, v√©rifie toujours les disponibilit√©s de l'utilisateur avec `lister_prochains_evenements`.
    3. **Strat√©gie : Proposer et Confirmer :** Si la dur√©e n'est pas explicitement donn√©e par l'utilisateur, propose une dur√©e logique et demande sa confirmation. Exemple : "Pour la t√¢che 'Pr√©parer la pr√©sentation', je te propose de bloquer un cr√©neau de 2h. √áa te va ?"
    4. **Agir :** Une fois la dur√©e confirm√©e ou si elle √©tait claire d√®s le d√©but, appelle l'outil `creer_evenement_calendrier` avec l'heure de d√©but ET de fin.

# PROFIL DE L'ASSISTANT
Tu es un assistant personnel expert en organisation et productivit√©, agissant comme un coach proactif.
Ton ton est encourageant, concis et orient√© vers l'action.
Tu dois anticiper les besoins de l'utilisateur, l'aider √† d√©composer ses projets en t√¢ches actionnables et √† maintenir son √©lan.
Tu dois syst√©matiquement utiliser les outils √† ta disposition pour manipuler les donn√©es (t√¢ches, projets, calendrier, m√©moire). Ne r√©ponds JAMAIS que tu as fait une action (cr√©er, modifier, enregistrer) sans avoir VRAIMENT appel√© l'outil correspondant.
Quand tu analyses une situation, fais-le en silence et ne pr√©sente que la conclusion ou la prochaine √©tape pertinente pour l'utilisateur.
Il doit rester concentr√© sur l'accomplissement des objectifs fix√©s.
L'IA doit utiliser les emojis de mani√®re pertinente et naturelle.
La date et l'heure actuelles sont : {date_actuelle}.

# SITUATION ACTUELLE DE L'UTILISATEUR
{analyse}
{partie_apprentissages}
# FIN DU CONTEXTE
"""
    logger.debug(f"CONTEXTE COMPLET: \n{prompt_systeme}")
    return prompt_systeme

def router_requete_utilisateur(historique_conversation: list):
    """
    G√®re la conversation en utilisant Google Gemini.
    Cette fonction est le nouveau cerveau de l'IA.
    """
    logger.info("üß† ROUTEUR (GEMINI): Nouvelle requ√™te re√ßue, d√©but de l'analyse.")
    
    # 1. Pr√©paration des donn√©es pour Gemini
    historique_pour_gemini = []
    system_prompt = ""
    for message in historique_conversation:
        role = message["role"]
        if role == "system":
            system_prompt = message["content"]
            continue # Le prompt syst√®me est g√©r√© s√©par√©ment par Gemini
        
        # On adapte les r√¥les pour Gemini ('assistant' devient 'model')
        if role == "assistant":
            role = "model"
            
        historique_pour_gemini.append({'role': role, 'parts': [message["content"]]})

    try:
        # 2. Configuration du mod√®le Gemini
        # On extrait la d√©finition de la fonction de chaque outil, car c'est le format attendu par Gemini.
        formatted_tools = [t['function'] for t in gemini_tools]
        logger.debug(f"üõ†Ô∏è OUTILS GEMINI FORMAT√âS: {_log_history(formatted_tools)}")
        
        model = genai.GenerativeModel(
            model_name="gemini-2.5-pro",
            system_instruction=system_prompt,
            # On utilise les outils fra√Æchement format√©s
            tools=formatted_tools
        )
        
        # 3. Boucle de conversation avec l'IA
        logger.debug(f"üí¨ HISTORIQUE POUR GEMINI (avant appel): {_log_history(historique_pour_gemini)}")
        response = model.generate_content(historique_pour_gemini)
        logger.debug(f"ü§ñ R√âPONSE BRUTE DE GEMINI: {response}")
        
        response_candidate = response.candidates[0]
        while response_candidate.content.parts and response_candidate.content.parts[0].function_call:
            # L'IA a demand√© d'utiliser un ou plusieurs outils
            function_calls_from_response = response_candidate.content.parts
            
            # On ajoute la demande de l'IA (le message 'model' avec le function_call) √† notre historique
            historique_pour_gemini.append(response_candidate.content)
            
            # On pr√©pare la liste des r√©ponses d'outils pour Gemini
            tool_response_parts = []
            
            for part in function_calls_from_response:
                function_call = part.function_call
                function_name = function_call.name
                args = dict(function_call.args)
                
                logger.info(f"üõ†Ô∏è OUTIL (GEMINI): L'IA demande l'ex√©cution de '{function_name}' avec les arguments: {args}")
                
                function_to_call = available_functions.get(function_name)
                if function_to_call:
                    try:
                        # On ex√©cute la fonction
                        function_response_data = function_to_call(**args)
                        
                        # --- NOUVELLE LOGIQUE DE SYNCHRONISATION T√ÇCHE -> CALENDRIER ---
                        if function_name in ["ajouter_tache", "modifier_tache"]:
                            # On v√©rifie si la fonction a r√©ussi et si une date est pr√©sente
                            if "erreur" not in function_response_data and function_response_data.get("date_echeance"):
                                tache_info = function_response_data
                                event_id_existant = tache_info.get("google_calendar_event_id")

                                # Cas 1: La t√¢che a √©t√© modifi√©e et avait d√©j√† un √©v√©nement
                                if function_name == "modifier_tache" and event_id_existant:
                                    logger.info(f"SYNCHRO: Mise √† jour de l'√©v√©nement existant '{event_id_existant}' pour la t√¢che '{tache_info['description']}'.")
                                    modifier_evenement_calendrier(
                                        event_id=event_id_existant,
                                        nouveau_titre=tache_info['description'],
                                        nouvelle_date_heure_debut=tache_info['date_echeance']
                                    )
                                # Cas 2: La t√¢che est nouvelle ou n'avait pas d'√©v√©nement, on en cr√©e un
                                elif not event_id_existant:
                                    logger.info(f"SYNCHRO: Cr√©ation d'un nouvel √©v√©nement pour la t√¢che '{tache_info['description']}'.")
                                    reponse_creation_event = creer_evenement_calendrier(
                                        titre=tache_info['description'],
                                        date_heure_debut=tache_info['date_echeance']
                                    )
                                    # Si la cr√©ation de l'√©v√©nement a r√©ussi, on lie les deux
                                    if "erreur" not in reponse_creation_event and reponse_creation_event.get("event_id"):
                                        lier_tache_a_evenement(
                                            id_tache=tache_info['id'],
                                            id_evenement=reponse_creation_event['event_id']
                                        )

                            # Cas 3: Une date d'√©ch√©ance a √©t√© retir√©e d'une t√¢che
                            elif "erreur" not in function_response_data and not function_response_data.get("date_echeance"):
                                tache_info = function_response_data
                                event_id_a_supprimer = tache_info.get("google_calendar_event_id")
                                if function_name == "modifier_tache" and event_id_a_supprimer:
                                    logger.info(f"SYNCHRO: Suppression de l'√©v√©nement associ√© '{event_id_a_supprimer}' car la date a √©t√© retir√©e de la t√¢che.")
                                    supprimer_evenement_calendrier(event_id=event_id_a_supprimer)
                                    # On d√©-lie l'√©v√©nement de la t√¢che
                                    lier_tache_a_evenement(id_tache=tache_info['id'], id_evenement=None)

                        # --- LOGIQUE DE SUPPRESSION D'√âV√âNEMENT LI√â ---
                        if function_name == "supprimer_tache" and "erreur" not in function_response_data:
                            event_id_a_supprimer = function_response_data.get("google_calendar_event_id")
                            if event_id_a_supprimer:
                                logger.info(f"SYNCHRO: Suppression de l'√©v√©nement de calendrier li√© '{event_id_a_supprimer}' suite √† la suppression de la t√¢che.")
                                supprimer_evenement_calendrier(event_id=event_id_a_supprimer)
                        
                        # V√âRIFICATION CRUCIALE : L'API Gemini attend un dictionnaire (objet JSON) pour le champ "response".
                        # Si notre fonction retourne une simple liste (ex: lister_taches), on doit l'encapsuler
                        # dans un dictionnaire pour √™tre conforme.
                        if isinstance(function_response_data, list):
                            function_response_data = {"resultats": function_response_data}

                        # On pr√©pare la r√©ponse au format que Gemini attend (une part par r√©ponse)
                        tool_response_parts.append(
                            {'function_response': {
                                'name': function_name,
                                'response': function_response_data
                                }
                            }
                        )
                    except Exception as e:
                        logger.error(f"üî• ERREUR: L'ex√©cution de la fonction '{function_name}' a √©chou√©: {repr(e)}")
                        tool_response_parts.append(
                            {'function_response': {
                                'name': function_name,
                                'response': {'erreur': repr(e)}
                                }
                            }
                        )
                else:
                    logger.warning(f"‚ö†Ô∏è ATTENTION: L'IA a tent√© d'appeler une fonction inconnue: {function_name}")
            
            # On ajoute une seule entr√©e 'tool' √† l'historique avec toutes les r√©ponses
            if tool_response_parts:
                logger.debug(f"üîô R√âPONSES OUTILS POUR GEMINI: {_log_history(tool_response_parts)}")
                historique_pour_gemini.append({'role': 'tool', 'parts': tool_response_parts})

            # On renvoie les r√©sultats √† l'IA pour qu'elle puisse formuler une r√©ponse finale
            logger.info("üß† ROUTEUR (GEMINI): Envoi des r√©sultats des outils √† Google Gemini pour la synth√®se finale...")
            logger.debug(f"üí¨ HISTORIQUE POUR GEMINI (avant 2e appel): {_log_history(historique_pour_gemini)}")
            response = model.generate_content(historique_pour_gemini)
            logger.debug(f"ü§ñ R√âPONSE BRUTE DE GEMINI (2e appel): {response}")
            response_candidate = response.candidates[0]

        # 5. R√©ponse finale de l'IA (apr√®s les outils, ou directement)
        # On acc√®de directement au texte, ce qui est plus s√ªr et √©vite les erreurs d'attributs
        final_response_text = ""
        if response.candidates and response.candidates[0].content.parts:
            final_response_text = "".join(part.text for part in response.candidates[0].content.parts)

        logger.info("‚úÖ ROUTEUR (GEMINI): R√©ponse finale g√©n√©r√©e et pr√™te √† √™tre envoy√©e.")
        
        # On met √† jour l'historique principal pour le prochain tour
        # (c'est une simplification, le vrai historique est dans `historique_pour_gemini` mais on doit garder la structure)
        historique_conversation.append({"role": "assistant", "content": final_response_text})
        
        return final_response_text

    except Exception as e:
        logger.error(f"üî• ERREUR D√âTAILL√âE: L'appel √† l'API Google Gemini a √©chou√©: {repr(e)}", exc_info=True)
        return f"D√©sol√©, une erreur de communication avec l'IA est survenue: {repr(e)}"
