# -*- coding: utf-8 -*-

import uuid
import logging

# On importe les fonctions de notre agent m√©moire pour centraliser l'acc√®s aux fichiers.
from .agent_memoire import lire_donnees_json, ecrire_donnees_json

# La configuration du logging est d√©j√† faite dans main.py, on r√©cup√®re juste le logger.
logger = logging.getLogger(__name__)

# Le nom du fichier est maintenant la seule chose √† conna√Ætre, le chemin complet est g√©r√© par l'agent m√©moire.
NOM_FICHIER_PROJETS = 'projets.json'

def _charger_projets() -> list:
    """Charge la liste des projets via l'agent m√©moire."""
    return lire_donnees_json(NOM_FICHIER_PROJETS)

def _sauvegarder_projets(projets: list):
    """Sauvegarde la liste compl√®te des projets via l'agent m√©moire."""
    ecrire_donnees_json(NOM_FICHIER_PROJETS, projets)

def lister_projets() -> list:
    """
    Retourne la liste compl√®te de tous les projets.
    S'assure que chaque projet a bien le champ 'suivi_proactif_active'.
    """
    logger.debug("üíæ PROJETS: Lecture et validation de tous les projets demand√©e.")
    projets = _charger_projets()
    
    modifications_effectuees = False
    for projet in projets:
        # Contr√¥le de qualit√© : si la cl√© de suivi manque, on l'ajoute par d√©faut √† False.
        if 'suivi_proactif_active' not in projet:
            projet['suivi_proactif_active'] = False
            modifications_effectuees = True
            
    # Si on a d√ª r√©parer des projets, on sauvegarde le fichier pour l'avenir.
    if modifications_effectuees:
        logger.info("‚öôÔ∏è PROJETS: Le contr√¥leur qualit√© a ajout√© des champs de suivi manquants √† certains projets.")
        _sauvegarder_projets(projets)
        
    return projets

def ajouter_projet(nom: str, description: str = None, calendrier_associe: str = None, emoji: str = None) -> dict:
    """Ajoute un nouveau projet √† la liste, avec une description, un calendrier et un √©moji optionnels."""
    logger.info("üíæ PROJETS: Tentative d'ajout du projet '%s'.", nom)
    if not nom:
        logger.warning("‚ö†Ô∏è PROJETS: Tentative d'ajout d'un projet sans nom.")
        return {"erreur": "Le nom du projet ne peut pas √™tre vide."}
    
    projets = _charger_projets()
    
    if any(p['nom'].lower() == nom.lower() for p in projets):
        logger.warning("‚ö†Ô∏è PROJETS: Le projet '%s' existe d√©j√†, ajout annul√©.", nom)
        return {"erreur": f"Un projet nomm√© '{nom}' existe d√©j√†."}
        
    nouveau_projet = {
        'id': f'proj_{uuid.uuid4()}',
        'nom': nom,
        'description': description or "",
        'calendrier_associe': calendrier_associe or "",
        'emoji': emoji or None,
        'suivi_proactif_active': False  # Par d√©faut, le suivi est d√©sactiv√©
    }
    projets.append(nouveau_projet)
    _sauvegarder_projets(projets)
    logger.info("‚úÖ PROJETS: Projet '%s' ajout√© avec succ√®s.", nom)
    return {"succes": f"Projet '{nom}' ajout√© avec succ√®s.", "details": nouveau_projet}

def modifier_projet(id_projet: str, nouveau_nom: str = None, nouvelle_description: str = None, nouveau_calendrier: str = None, nouvel_emoji: str = None) -> dict:
    """
    Modifie un projet existant. Au moins un des champs optionnels doit √™tre fourni.
    Permet de changer le nom, la description, le calendrier associ√© ou l'√©moji.
    Pour effacer un champ, passer une cha√Æne vide "".
    """
    logger.info("üíæ PROJETS: Tentative de modification du projet ID '%s'.", id_projet)
    if nouveau_nom is None and nouvelle_description is None and nouveau_calendrier is None and nouvel_emoji is None:
        logger.warning("‚ö†Ô∏è PROJETS: Modification du projet ID '%s' appel√©e sans aucun champ √† modifier.", id_projet)
        return {"erreur": "Au moins un champ √† modifier doit √™tre fourni (nom, description, calendrier ou √©moji)."}

    projets = _charger_projets()
    projet_a_modifier = next((p for p in projets if p['id'] == id_projet), None)
    
    if not projet_a_modifier:
        logger.error("üî• PROJETS: Impossible de modifier, le projet ID '%s' est introuvable.", id_projet)
        return {"erreur": f"Aucun projet trouv√© avec l'ID '{id_projet}'."}
    
    # Flag pour savoir si une modification a eu lieu
    modifie = False

    if nouveau_nom is not None:
        if not nouveau_nom:
            return {"erreur": "Le nouveau nom ne peut pas √™tre vide."}
        # V√©rifier que le nouveau nom n'est pas d√©j√† pris par un autre projet
        if any(p['nom'].lower() == nouveau_nom.lower() and p['id'] != id_projet for p in projets):
            return {"erreur": f"Un autre projet nomm√© '{nouveau_nom}' existe d√©j√†."}
        projet_a_modifier['nom'] = nouveau_nom
        modifie = True
        
    if nouvelle_description is not None:
        projet_a_modifier['description'] = nouvelle_description
        modifie = True
        
    if nouveau_calendrier is not None:
        projet_a_modifier['calendrier_associe'] = nouveau_calendrier
        modifie = True
        
    if nouvel_emoji is not None:
        projet_a_modifier['emoji'] = nouvel_emoji
        modifie = True
        
    if modifie:
        _sauvegarder_projets(projets)
        logger.info("‚úÖ PROJETS: Projet ID '%s' mis √† jour avec succ√®s.", id_projet)
        return {"succes": f"Projet ID {id_projet} mis √† jour.", "details": projet_a_modifier}
    else:
        # Ce cas ne devrait pas √™tre atteint gr√¢ce √† la v√©rification initiale, mais c'est une s√©curit√©
        return {"info": "Aucune modification n'a √©t√© appliqu√©e."}


def supprimer_projet(id_projet: str) -> dict:
    """Supprime un projet de la liste en utilisant son ID."""
    logger.info("üíæ PROJETS: Tentative de suppression du projet ID '%s'.", id_projet)
    projets = _charger_projets()
    projets_avant = len(projets)
    projets_apres = [p for p in projets if p['id'] != id_projet]
    
    if len(projets_apres) == projets_avant:
        logger.error("üî• PROJETS: Impossible de supprimer, le projet ID '%s' est introuvable.", id_projet)
        return {"erreur": f"Aucun projet trouv√© avec l'ID '{id_projet}'."}
        
    _sauvegarder_projets(projets_apres)
    logger.info("‚úÖ PROJETS: Projet ID '%s' supprim√© avec succ√®s.", id_projet)
    return {"succes": f"Projet ID {id_projet} supprim√©."} 

def _modifier_etat_suivi_projet(nom_projet: str, etat: bool) -> dict:
    """Fonction interne pour activer ou d√©sactiver le suivi d'un projet."""
    projets = _charger_projets()
    projet_a_modifier = next((p for p in projets if p['nom'].lower() == nom_projet.lower()), None)

    if not projet_a_modifier:
        logger.error("üî• PROJETS: Impossible de modifier le suivi, le projet '%s' est introuvable.", nom_projet)
        return {"erreur": f"Aucun projet trouv√© avec le nom '{nom_projet}'."}

    projet_a_modifier['suivi_proactif_active'] = etat
    _sauvegarder_projets(projets)
    
    action = "activ√©" if etat else "d√©sactiv√©"
    logger.info(f"‚úÖ PROJETS: Suivi proactif {action} pour le projet '{nom_projet}'.")
    return {"succes": f"Le suivi proactif a √©t√© {action} pour le projet '{nom_projet}'."}

def activer_suivi_projet(nom_projet: str) -> dict:
    """Active le suivi proactif pour les √©v√©nements d'un projet sp√©cifique."""
    return _modifier_etat_suivi_projet(nom_projet, True)

def desactiver_suivi_projet(nom_projet: str) -> dict:
    """D√©sactive le suivi proactif pour les √©v√©nements d'un projet sp√©cifique."""
    return _modifier_etat_suivi_projet(nom_projet, False) 