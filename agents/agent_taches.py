# -*- coding: utf-8 -*-

# On importe les fonctions de notre agent m√©moire pour ne pas interagir directement avec les fichiers.
from .agent_memoire import lire_donnees_json, ecrire_donnees_json
from .agent_projets import lister_projets
import uuid # Pour g√©n√©rer des identifiants uniques pour chaque t√¢che
from datetime import datetime
import logging

NOM_FICHIER_TACHES = 'taches.json'
logger = logging.getLogger(__name__)

def _calculer_priorite(important: bool, urgent: bool) -> str:
    """Calcule la priorit√© selon la matrice d'Eisenhower."""
    if urgent and important:
        return "P1 : Urgent et Important (√Ä faire)"
    elif not urgent and important:
        return "P2 : Important mais pas Urgent (√Ä planifier)"
    elif urgent and not important:
        return "P3 : Urgent mais pas Important (√Ä d√©l√©guer)"
    else:
        return "P4 : Ni Urgent, ni Important (√Ä abandonner/reporter)"

def ajouter_tache(description: str, nom_projet: str = None, important: bool = False, urgent: bool = False, date_echeance: str = None) -> dict:
    """
    Ajoute une nouvelle t√¢che. Calcule dynamiquement sa position ('ordre')
    pour qu'elle soit plac√©e √† la fin de sa cat√©gorie de priorit√©.
    """
    logger.info("üíæ T√ÇCHES: Tentative d'ajout de la t√¢che '%s'.", description)
    taches = lire_donnees_json(NOM_FICHIER_TACHES)
    projet_id = None
    if nom_projet:
        projets = lister_projets()
        for p in projets:
            if p['nom'].lower() == nom_projet.lower():
                projet_id = p['id']
                break

    priorite = _calculer_priorite(important, urgent)
    
    # On filtre les t√¢ches de la m√™me priorit√© pour trouver le nouvel 'ordre'.
    taches_meme_priorite = [t for t in taches if t.get('priorite') == priorite]
    if taches_meme_priorite:
        # On prend l'ordre le plus √©lev√© et on ajoute 1.0
        nouvel_ordre = max(t.get('ordre', 0) for t in taches_meme_priorite) + 1.0
    else:
        # C'est la premi√®re t√¢che de cette priorit√©.
        nouvel_ordre = 1.0

    nouvelle_tache = {
        'id': str(uuid.uuid4()),
        'description': description,
        'statut': '√† faire',
        'projet_id': projet_id,
        'date_creation': datetime.now().isoformat(),
        'date_modification': datetime.now().isoformat(),
        'date_echeance': date_echeance,
        'important': important,
        'urgent': urgent,
        'priorite': priorite,
        'ordre': nouvel_ordre, # On utilise le nouvel ordre calcul√©.
        'suivi_envoye': False,
        'google_calendar_event_id': None
    }
    taches.append(nouvelle_tache)
    ecrire_donnees_json(NOM_FICHIER_TACHES, taches)
    logger.info("‚úÖ T√ÇCHES: T√¢che '%s' ajout√©e avec succ√®s avec l'ordre %f.", description, nouvel_ordre)
    return nouvelle_tache

def lister_taches() -> list:
    """
    R√©cup√®re la liste de toutes les t√¢ches, les enrichit, les r√©pare si n√©cessaire,
    et les trie par ordre de priorit√© Eisenhower PUIS par ordre personnalis√©.
    Cette fonction agit comme un "contr√¥leur qualit√©" pour les donn√©es.
    """
    logger.debug("üíæ T√ÇCHES: Lecture et v√©rification de toutes les t√¢ches demand√©es.")
    taches = lire_donnees_json(NOM_FICHIER_TACHES)
    projets = lister_projets()
    
    # On cr√©e un dictionnaire pour trouver rapidement les infos d'un projet par son ID
    projets_map = {p['id']: {'nom': p['nom'], 'emoji': p.get('emoji')} for p in projets}
    
    modifications_effectuees = False

    # D'abord, on s'assure que toutes les t√¢ches ont une priorit√© et un ordre correct.
    # Cette boucle sert aussi de migration pour passer des entiers aux flottants.
    for tache in taches:
        # Contr√¥le de coh√©rence de la priorit√©
        importance = tache.get('important', False)
        urgence = tache.get('urgent', False)
        priorite_attendue = _calculer_priorite(importance, urgence)
        if tache.get('priorite') != priorite_attendue:
            tache['priorite'] = priorite_attendue
            modifications_effectuees = True
        
        # Contr√¥le et migration du champ 'ordre'
        if not isinstance(tache.get('ordre'), float):
            # Si 'ordre' n'existe pas ou n'est pas un float, on le convertit.
            # On met une valeur tr√®s haute pour qu'il soit plac√© √† la fin lors du prochain tri.
            tache['ordre'] = float(tache.get('ordre', 9999))
            modifications_effectuees = True

    # La logique de re-num√©rotation agressive est supprim√©e.
    # On se contente de trier.

    # On parcourt chaque t√¢che pour v√©rifier sa coh√©rence de projet
    for tache in taches:
        # Contr√¥le 1 : Coh√©rence des donn√©es de projet
        if tache.get('projet_id'):
            projet_info = projets_map.get(tache['projet_id'])
            if projet_info:
                # Si le nom du projet est manquant ou ne correspond pas, on le corrige
                if tache.get('nom_projet') != projet_info.get('nom'):
                    tache['nom_projet'] = projet_info.get('nom')
                    modifications_effectuees = True
                # Si l'√©moji du projet est manquant ou ne correspond pas, on le corrige
                if tache.get('emoji_projet') != projet_info.get('emoji'):
                    tache['emoji_projet'] = projet_info.get('emoji')
                    modifications_effectuees = True
            else: # Le projet associ√© n'existe plus
                if tache.get('nom_projet') != 'Projet inconnu ou supprim√©':
                    tache['nom_projet'] = 'Projet inconnu ou supprim√©'
                    modifications_effectuees = True

    if modifications_effectuees:
        logger.info("‚öôÔ∏è T√ÇCHES: Le contr√¥leur qualit√© a corrig√©/migr√© des donn√©es dans les t√¢ches.")
        ecrire_donnees_json(NOM_FICHIER_TACHES, taches)

    # On trie les t√¢ches par priorit√© (P1, P2, P3, P4) PUIS par leur ordre personnalis√©.
    taches.sort(key=lambda x: (x.get('priorite', 'P9'), x.get('ordre', 999.0)))
    
    # Enrichir chaque t√¢che avec des informations sur ses sous-t√¢ches
    for tache in taches:
        sous_taches = tache.get('sous_taches', [])
        if sous_taches:
            total_sous_taches = len(sous_taches)
            sous_taches_terminees = len([st for st in sous_taches if st.get('statut') == 'termin√©e'])
            sous_taches_en_cours = len([st for st in sous_taches if st.get('statut') == 'en cours'])
            
            # Ajouter un r√©sum√© des sous-t√¢ches √† la t√¢che
            tache['resume_sous_taches'] = {
                'total': total_sous_taches,
                'terminees': sous_taches_terminees,
                'en_cours': sous_taches_en_cours,
                'a_faire': total_sous_taches - sous_taches_terminees - sous_taches_en_cours
            }
            
            # Calculer le pourcentage de progression
            if total_sous_taches > 0:
                tache['progression_sous_taches'] = round((sous_taches_terminees / total_sous_taches) * 100)
            else:
                tache['progression_sous_taches'] = 0
        else:
            tache['resume_sous_taches'] = None
            tache['progression_sous_taches'] = None
            
    return taches

def _trouver_tache(description_tache: str, taches: list) -> dict:
    """Fonction utilitaire pour trouver la t√¢che la plus pertinente."""
    # Recherche exacte d'abord
    for tache in taches:
        if tache['description'].lower() == description_tache.lower():
            return tache
    # Recherche partielle si pas de correspondance exacte
    for tache in taches:
        if description_tache.lower() in tache['description'].lower():
            return tache
    return None

def reorganiser_taches(priorite_cible: str, descriptions_ordonnees: list) -> dict:
    """
    R√©organise l'ordre des t√¢ches pour une priorit√© donn√©e en utilisant une m√©thode de "moyenne".
    Ceci √©vite d'avoir √† renum√©roter toutes les t√¢ches √† chaque changement.
    """
    logger.info(f"üíæ T√ÇCHES: Tentative de r√©organisation d√©cimale pour la priorit√© '{priorite_cible}'.")
    
    priorite_cible_norm = priorite_cible.strip().upper()
    if priorite_cible_norm not in ['P1', 'P2', 'P3', 'P4']:
        return {"erreur": f"Priorit√© '{priorite_cible}' non valide. Veuillez utiliser P1, P2, P3 ou P4."}

    toutes_les_taches = lister_taches() # On utilise lister pour s'assurer que tout est propre
    
    taches_concern√©es = [t for t in toutes_les_taches if t.get('priorite', '').startswith(priorite_cible_norm)]
    autres_taches = [t for t in toutes_les_taches if not t.get('priorite', '').startswith(priorite_cible_norm)]

    if not taches_concern√©es:
        return {"info": f"Aucune t√¢che trouv√©e pour la priorit√© {priorite_cible_norm}."}

    # On cr√©e une map pour un acc√®s rapide par description normalis√©e
    taches_map = {t['description'].lower().strip(): t for t in taches_concern√©es}
    
    # On reconstruit la liste ordonn√©e des t√¢ches sp√©cifi√©es par l'utilisateur
    taches_specifiees_ordonnees = []
    for desc in descriptions_ordonnees:
        tache_trouvee = taches_map.pop(desc.lower().strip(), None)
        if tache_trouvee:
            taches_specifiees_ordonnees.append(tache_trouvee)
            
    # Les t√¢ches restantes sont celles non mentionn√©es par l'utilisateur
    taches_restantes = sorted(taches_map.values(), key=lambda t: t['ordre'])

    # On fusionne la nouvelle liste : d'abord celles ordonn√©es par l'utilisateur, puis les autres.
    liste_finale_ordonnee = taches_specifiees_ordonnees + taches_restantes

    # --- C'est ici que la nouvelle logique de calcul d'ordre intervient ---
    ordre_precedent = 0.0
    for i, tache in enumerate(liste_finale_ordonnee):
        ordre_suivant = float('inf')
        if i + 1 < len(liste_finale_ordonnee):
            ordre_suivant = liste_finale_ordonnee[i+1].get('ordre', ordre_precedent + 2.0)

        # Si l'ordre actuel est d√©j√† correct (entre le pr√©c√©dent et le suivant), on ne touche √† rien
        if ordre_precedent < tache.get('ordre', 0) < ordre_suivant:
            ordre_precedent = tache.get('ordre')
            continue

        # Sinon, on calcule un nouvel ordre en faisant la moyenne.
        nouvel_ordre = (ordre_precedent + ordre_suivant) / 2.0
        tache['ordre'] = nouvel_ordre
        ordre_precedent = nouvel_ordre
        
    ecrire_donnees_json(NOM_FICHIER_TACHES, autres_taches + liste_finale_ordonnee)
    
    logger.info(f"‚úÖ T√ÇCHES: Priorit√© '{priorite_cible_norm}' r√©organis√©e avec succ√®s via la m√©thode d√©cimale.")
    return {"succes": f"L'ordre des t√¢ches {priorite_cible_norm} a √©t√© mis √† jour."}


def modifier_tache(description_actuelle: str, nouvelle_description: str = None, nom_projet: str = None, nouvelle_importance: bool = None, nouvelle_urgence: bool = None, nouvelle_date_echeance: str = None, suivi_envoye: bool = None) -> dict:
    """
    Modifie une t√¢che. La t√¢che est identifi√©e par sa description actuelle.
    Permet de changer la description, le projet, l'importance, l'urgence, la date d'√©ch√©ance ou le statut du suivi.
    """
    logger.info("üíæ T√ÇCHES: Tentative de modification de la t√¢che '%s'.", description_actuelle)
    taches = lister_taches()
    tache_a_modifier = _trouver_tache(description_actuelle, taches)

    if not tache_a_modifier:
        logger.error("üî• T√ÇCHES: Impossible de modifier, la t√¢che '%s' est introuvable.", description_actuelle)
        return {"erreur": f"T√¢che '{description_actuelle}' non trouv√©e."}

    modifications_faites = False

    if nouvelle_description:
        tache_a_modifier['description'] = nouvelle_description
        modifications_faites = True

    if nom_projet:
        projets = lister_projets()
        projet_cible = next((p for p in projets if p['nom'].lower() == nom_projet.lower()), None)
        if not projet_cible:
            return {"erreur": f"Projet '{nom_projet}' non trouv√©."}
        tache_a_modifier['projet_id'] = projet_cible['id']
        modifications_faites = True

    if nouvelle_date_echeance is not None:
        tache_a_modifier['date_echeance'] = nouvelle_date_echeance
        tache_a_modifier['suivi_envoye'] = False # On r√©-arme le suivi !
        modifications_faites = True

    if suivi_envoye is not None:
        tache_a_modifier['suivi_envoye'] = suivi_envoye
        modifications_faites = True

    # Gestion de l'importance et de l'urgence
    if nouvelle_importance is not None:
        tache_a_modifier['important'] = nouvelle_importance
        modifications_faites = True
    if nouvelle_urgence is not None:
        tache_a_modifier['urgent'] = nouvelle_urgence
        modifications_faites = True
    
    # Si l'un des deux a chang√©, on recalcule la priorit√©
    if nouvelle_importance is not None or nouvelle_urgence is not None:
        # On s'assure d'avoir les valeurs les plus √† jour pour le calcul
        importance = tache_a_modifier.get('important', False)
        urgence = tache_a_modifier.get('urgent', False)
        tache_a_modifier['priorite'] = _calculer_priorite(importance, urgence)

    if modifications_faites:
        tache_a_modifier['date_modification'] = datetime.now().isoformat()
        ecrire_donnees_json(NOM_FICHIER_TACHES, taches)
        logger.info("‚úÖ T√ÇCHES: T√¢che '%s' modifi√©e avec succ√®s.", description_actuelle)
        return tache_a_modifier
    else:
        return {"info": "Aucune modification demand√©e."}

def changer_statut_tache(description_tache: str, nouveau_statut: str) -> dict:
    """
    Change le statut d'une t√¢che ('√† faire', 'en cours', 'termin√©e').
    La t√¢che est identifi√©e par sa description.
    """
    statuts_valides = ['√† faire', 'en cours', 'termin√©e', 'annul√©e']
    if nouveau_statut not in statuts_valides:
        return {"erreur": f"Statut '{nouveau_statut}' non valide. Statuts possibles : {statuts_valides}"}
    
    taches = lister_taches()
    tache_a_modifier = _trouver_tache(description_tache, taches)

    if not tache_a_modifier:
        return {"erreur": f"T√¢che '{description_tache}' non trouv√©e."}

    tache_a_modifier['statut'] = nouveau_statut
    tache_a_modifier['date_modification'] = datetime.now().isoformat()
    ecrire_donnees_json(NOM_FICHIER_TACHES, taches)
    return tache_a_modifier

def supprimer_tache(description_tache: str) -> dict:
    """
    Supprime une t√¢che en se basant sur sa description.
    Retourne l'ID de l'√©v√©nement calendrier associ√© s'il existe, pour permettre sa suppression.
    """
    logger.info("üíæ T√ÇCHES: Tentative de suppression de la t√¢che '%s'.", description_tache)
    taches = lister_taches()
    tache_a_supprimer = _trouver_tache(description_tache, taches)

    if not tache_a_supprimer:
        logger.error("üî• T√ÇCHES: Impossible de supprimer, la t√¢che '%s' est introuvable.", description_tache)
        return {"erreur": f"T√¢che '{description_tache}' non trouv√©e."}

    event_id = tache_a_supprimer.get('google_calendar_event_id')

    taches.remove(tache_a_supprimer)
    ecrire_donnees_json(NOM_FICHIER_TACHES, taches)
    logger.info("‚úÖ T√ÇCHES: T√¢che '%s' supprim√©e avec succ√®s.", description_tache)
    
    response = {"succes": f"La t√¢che '{description_tache}' a √©t√© supprim√©e."}
    if event_id:
        response["google_calendar_event_id"] = event_id
        
    return response

def lier_tache_a_evenement(id_tache: str, id_evenement: str) -> dict:
    """Associe un ID d'√©v√©nement Google Calendar √† une t√¢che."""
    logger.info("üíæ T√ÇCHES: Liaison de la t√¢che ID '%s' √† l'√©v√©nement ID '%s'.", id_tache, id_evenement)
    taches = lister_taches()
    tache_a_lier = next((t for t in taches if t['id'] == id_tache), None)

    if not tache_a_lier:
        logger.error("üî• T√ÇCHES: Impossible de lier, la t√¢che ID '%s' est introuvable.", id_tache)
        return {"erreur": f"T√¢che avec l'ID '{id_tache}' non trouv√©e."}

    tache_a_lier['google_calendar_event_id'] = id_evenement
    tache_a_lier['date_modification'] = datetime.now().isoformat()
    ecrire_donnees_json(NOM_FICHIER_TACHES, taches)
    logger.info("‚úÖ T√ÇCHES: Liaison effectu√©e avec succ√®s.")
    return {"succes": "Liaison de la t√¢che √† l'√©v√©nement de calendrier r√©ussie."}

# === FONCTIONS POUR LES SOUS-T√ÇCHES ===

def ajouter_sous_tache(description_tache_parent: str, description_sous_tache: str, important: bool = False, urgent: bool = False) -> dict:
    """
    Ajoute une sous-t√¢che √† une t√¢che existante.
    La t√¢che parent est identifi√©e par sa description.
    """
    logger.info("üíæ SOUS-T√ÇCHES: Tentative d'ajout de la sous-t√¢che '%s' √† la t√¢che '%s'.", description_sous_tache, description_tache_parent)
    taches = lister_taches()
    tache_parent = _trouver_tache(description_tache_parent, taches)

    if not tache_parent:
        logger.error("üî• SOUS-T√ÇCHES: Impossible d'ajouter, la t√¢che parent '%s' est introuvable.", description_tache_parent)
        return {"erreur": f"T√¢che parent '{description_tache_parent}' non trouv√©e."}

    # Initialiser le champ sous_taches s'il n'existe pas
    if 'sous_taches' not in tache_parent:
        tache_parent['sous_taches'] = []

    # V√©rifier qu'une sous-t√¢che avec cette description n'existe pas d√©j√†
    for sous_tache in tache_parent['sous_taches']:
        if sous_tache['description'].lower() == description_sous_tache.lower():
            logger.warning("‚ö†Ô∏è SOUS-T√ÇCHES: Une sous-t√¢che avec la description '%s' existe d√©j√†.", description_sous_tache)
            return {"erreur": f"Une sous-t√¢che '{description_sous_tache}' existe d√©j√† dans cette t√¢che."}

    nouvelle_sous_tache = {
        'id': f'sous_{uuid.uuid4()}',
        'description': description_sous_tache,
        'statut': '√† faire',
        'date_creation': datetime.now().isoformat(),
        'date_modification': datetime.now().isoformat(),
        'important': important,
        'urgent': urgent,
        'priorite': _calculer_priorite(important, urgent)
    }

    tache_parent['sous_taches'].append(nouvelle_sous_tache)
    tache_parent['date_modification'] = datetime.now().isoformat()
    
    ecrire_donnees_json(NOM_FICHIER_TACHES, taches)
    logger.info("‚úÖ SOUS-T√ÇCHES: Sous-t√¢che '%s' ajout√©e avec succ√®s.", description_sous_tache)
    return {"succes": f"Sous-t√¢che '{description_sous_tache}' ajout√©e √† '{description_tache_parent}'.", "details": nouvelle_sous_tache}

def lister_sous_taches(description_tache_parent: str) -> dict:
    """
    Liste toutes les sous-t√¢ches d'une t√¢che parent.
    Retourne les sous-t√¢ches tri√©es par priorit√©.
    """
    logger.info("üíæ SOUS-T√ÇCHES: Listage des sous-t√¢ches de '%s'.", description_tache_parent)
    taches = lister_taches()
    tache_parent = _trouver_tache(description_tache_parent, taches)

    if not tache_parent:
        logger.error("üî• SOUS-T√ÇCHES: Impossible de lister, la t√¢che parent '%s' est introuvable.", description_tache_parent)
        return {"erreur": f"T√¢che parent '{description_tache_parent}' non trouv√©e."}

    sous_taches = tache_parent.get('sous_taches', [])
    
    # Trier les sous-t√¢ches par priorit√©
    sous_taches.sort(key=lambda x: x.get('priorite', 'P9'))
    
    return {"tache_parent": description_tache_parent, "sous_taches": sous_taches}

def _trouver_sous_tache(description_tache_parent: str, id_ou_description_sous_tache: str, taches: list) -> tuple:
    """
    Fonction utilitaire pour trouver une sous-t√¢che sp√©cifique.
    Retourne un tuple (tache_parent, sous_tache) ou (None, None) si non trouv√©e.
    """
    tache_parent = _trouver_tache(description_tache_parent, taches)
    if not tache_parent or 'sous_taches' not in tache_parent:
        return None, None

    # Recherche par ID d'abord
    for sous_tache in tache_parent['sous_taches']:
        if sous_tache['id'] == id_ou_description_sous_tache:
            return tache_parent, sous_tache
    
    # Recherche par description exacte
    for sous_tache in tache_parent['sous_taches']:
        if sous_tache['description'].lower() == id_ou_description_sous_tache.lower():
            return tache_parent, sous_tache
    
    # Recherche partielle par description
    for sous_tache in tache_parent['sous_taches']:
        if id_ou_description_sous_tache.lower() in sous_tache['description'].lower():
            return tache_parent, sous_tache
    
    return tache_parent, None

def modifier_sous_tache(description_tache_parent: str, description_sous_tache_actuelle: str, nouvelle_description: str = None, nouvelle_importance: bool = None, nouvelle_urgence: bool = None) -> dict:
    """
    Modifie une sous-t√¢che existante.
    """
    logger.info("üíæ SOUS-T√ÇCHES: Tentative de modification de la sous-t√¢che '%s' dans '%s'.", description_sous_tache_actuelle, description_tache_parent)
    taches = lister_taches()
    tache_parent, sous_tache = _trouver_sous_tache(description_tache_parent, description_sous_tache_actuelle, taches)

    if not tache_parent:
        logger.error("üî• SOUS-T√ÇCHES: Impossible de modifier, la t√¢che parent '%s' est introuvable.", description_tache_parent)
        return {"erreur": f"T√¢che parent '{description_tache_parent}' non trouv√©e."}
    
    if not sous_tache:
        logger.error("üî• SOUS-T√ÇCHES: Impossible de modifier, la sous-t√¢che '%s' est introuvable.", description_sous_tache_actuelle)
        return {"erreur": f"Sous-t√¢che '{description_sous_tache_actuelle}' non trouv√©e."}

    modifications_faites = False

    if nouvelle_description:
        sous_tache['description'] = nouvelle_description
        modifications_faites = True

    if nouvelle_importance is not None:
        sous_tache['important'] = nouvelle_importance
        modifications_faites = True
    
    if nouvelle_urgence is not None:
        sous_tache['urgent'] = nouvelle_urgence
        modifications_faites = True
    
    # Recalculer la priorit√© si n√©cessaire
    if nouvelle_importance is not None or nouvelle_urgence is not None:
        importance = sous_tache.get('important', False)
        urgence = sous_tache.get('urgent', False)
        sous_tache['priorite'] = _calculer_priorite(importance, urgence)

    if modifications_faites:
        sous_tache['date_modification'] = datetime.now().isoformat()
        tache_parent['date_modification'] = datetime.now().isoformat()
        ecrire_donnees_json(NOM_FICHIER_TACHES, taches)
        logger.info("‚úÖ SOUS-T√ÇCHES: Sous-t√¢che '%s' modifi√©e avec succ√®s.", description_sous_tache_actuelle)
        return {"succes": f"Sous-t√¢che modifi√©e avec succ√®s.", "details": sous_tache}
    else:
        return {"info": "Aucune modification demand√©e."}

def changer_statut_sous_tache(description_tache_parent: str, description_sous_tache: str, nouveau_statut: str) -> dict:
    """
    Change le statut d'une sous-t√¢che ('√† faire', 'en cours', 'termin√©e').
    """
    statuts_valides = ['√† faire', 'en cours', 'termin√©e', 'annul√©e']
    if nouveau_statut not in statuts_valides:
        return {"erreur": f"Statut '{nouveau_statut}' non valide. Statuts possibles : {statuts_valides}"}
    
    logger.info("üíæ SOUS-T√ÇCHES: Tentative de changement de statut de la sous-t√¢che '%s' vers '%s'.", description_sous_tache, nouveau_statut)
    taches = lister_taches()
    tache_parent, sous_tache = _trouver_sous_tache(description_tache_parent, description_sous_tache, taches)

    if not tache_parent:
        return {"erreur": f"T√¢che parent '{description_tache_parent}' non trouv√©e."}
    
    if not sous_tache:
        return {"erreur": f"Sous-t√¢che '{description_sous_tache}' non trouv√©e."}

    sous_tache['statut'] = nouveau_statut
    sous_tache['date_modification'] = datetime.now().isoformat()
    tache_parent['date_modification'] = datetime.now().isoformat()
    
    ecrire_donnees_json(NOM_FICHIER_TACHES, taches)
    logger.info("‚úÖ SOUS-T√ÇCHES: Statut de la sous-t√¢che '%s' chang√© vers '%s'.", description_sous_tache, nouveau_statut)
    return {"succes": f"Statut de la sous-t√¢che '{description_sous_tache}' chang√© vers '{nouveau_statut}'.", "details": sous_tache}

def supprimer_sous_tache(description_tache_parent: str, description_sous_tache: str) -> dict:
    """
    Supprime une sous-t√¢che d'une t√¢che parent.
    """
    logger.info("üíæ SOUS-T√ÇCHES: Tentative de suppression de la sous-t√¢che '%s' de '%s'.", description_sous_tache, description_tache_parent)
    taches = lister_taches()
    tache_parent, sous_tache = _trouver_sous_tache(description_tache_parent, description_sous_tache, taches)

    if not tache_parent:
        return {"erreur": f"T√¢che parent '{description_tache_parent}' non trouv√©e."}
    
    if not sous_tache:
        return {"erreur": f"Sous-t√¢che '{description_sous_tache}' non trouv√©e."}

    tache_parent['sous_taches'].remove(sous_tache)
    tache_parent['date_modification'] = datetime.now().isoformat()
    
    ecrire_donnees_json(NOM_FICHIER_TACHES, taches)
    logger.info("‚úÖ SOUS-T√ÇCHES: Sous-t√¢che '%s' supprim√©e avec succ√®s.", description_sous_tache)
    return {"succes": f"Sous-t√¢che '{description_sous_tache}' supprim√©e."}
