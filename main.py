# -*- coding: utf-8 -*-

import os
import json
import re

# --- D√©ploiement sur Railway : Cr√©ation des fichiers d'authentification ---
# On v√©rifie si les variables d'environnement pour Google existent.
# C'est la m√©thode s√©curis√©e pour fournir les cl√©s √† un serveur.
google_creds_json = os.getenv("GOOGLE_CREDENTIALS_JSON")
google_token_json = os.getenv("GOOGLE_TOKEN_JSON")

# Si la variable pour credentials.json existe, on √©crit le fichier.
if google_creds_json:
    with open("credentials.json", "w") as f:
        f.write(google_creds_json)
    print("‚úÖ Fichier credentials.json cr√©√© √† partir des variables d'environnement.")

# Si la variable pour token.json existe, on √©crit le fichier.
if google_token_json:
    with open("token.json", "w") as f:
        f.write(google_token_json)
    print("‚úÖ Fichier token.json cr√©√© √† partir des variables d'environnement.")
# --- Fin de la section de d√©ploiement ---

import logging
import logging.handlers # N√©cessaire pour la rotation des logs
from dotenv import load_dotenv
import datetime
from dateutil import parser # Pour parser les dates ISO plus facilement
import asyncio
from apscheduler.schedulers.asyncio import AsyncIOScheduler
import pytz # Pour g√©rer les fuseaux horaires

# On charge les variables d'environnement (les cl√©s API) tout au d√©but.
# C'est la correction la plus importante pour que le bot puisse trouver les cl√©s.
load_dotenv()

# Importations des biblioth√®ques Telegram
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes

# Importation de notre nouveau routeur intelligent et des fonctions des agents
from agents.agent_conseiller import router_requete_utilisateur, generer_contexte_complet
from agents.agent_taches import lister_taches, modifier_tache
# On importe les nouvelles fonctions dont le superviseur a besoin
from agents.agent_calendrier import lister_evenements_passes
from agents.agent_memoire import lire_evenements_suivis, ajouter_evenement_suivi
from agents.agent_projets import lister_projets

# Variable globale pour stocker le dernier chat_id actif (simplification pour le moment)
dernier_chat_id_actif = None


def normalize_calendar_name(name: str) -> str:
    """
    Normalise un nom de calendrier pour la comparaison :
    - Supprime les emojis et de nombreux symboles.
    - Met en minuscules.
    - Supprime les espaces au d√©but et √† la fin.
    """
    if not name:
        return ""
    # Expression r√©guli√®re pour supprimer une large gamme d'√©mojis et de symboles
    # C'est une approche agressive pour maximiser les chances de correspondance.
    try:
        emoji_pattern = re.compile(
            "["
            "\U0001F600-\U0001F64F"  # emoticons
            "\U0001F300-\U0001F5FF"  # symbols & pictographs
            "\U0001F680-\U0001F6FF"  # transport & map symbols
            "\U0001F1E0-\U0001F1FF"  # flags (iOS)
            "\U00002500-\U00002BEF"  # chinese char
            "\U00002702-\U000027B0"
            "\U000024C2-\U0001F251"
            "\U0001f926-\U0001f937"
            "\U00010000-\U0010ffff"
            "\u2640-\u2642"
            "\u2600-\u2B55"
            "\u200d"
            "\u23cf"
            "\u23e9"
            "\u231a"
            "\ufe0f"  # dingbats
            "\u3030"
            "]+",
            flags=re.UNICODE,
        )
        # On supprime les emojis, puis les espaces superflus et on met en minuscule
        return emoji_pattern.sub(r'', name).strip().lower()
    except re.error:
        # En cas d'erreur de regex, on fait un nettoyage simple
        return ''.join(c for c in name if c.isalnum() or c.isspace()).strip().lower()

# --- Nouvelle fonction de Suivi Intelligent (Le "Superviseur") ---
async def suivi_intelligent(context: ContextTypes.DEFAULT_TYPE):
    """
    Cette fonction est le "Superviseur". Elle v√©rifie les t√¢ches et √©v√©nements
    et d√©clenche des messages proactifs via l'IA.
    """
    global dernier_chat_id_actif
    if not dernier_chat_id_actif:
        # On ne log que si on est en mode DEBUG pour ne pas polluer les logs
        # logger.info("‚è∞ SUPERVISEUR: Pas de chat actif, aucun suivi √† envoyer.")
        return

    logger.info(f"‚è∞ SUPERVISEUR: V√©rification des suivis proactifs pour le chat ID {dernier_chat_id_actif}...")

    try:
        # --- 1. SUIVI DES T√ÇCHES EN RETARD ---
        toutes_les_taches = lister_taches()
        paris_tz = pytz.timezone("Europe/Paris")
        maintenant = datetime.datetime.now(paris_tz)

        for tache in toutes_les_taches:
            # Condition 1: La t√¢che a une √©ch√©ance, est toujours "√† faire" et n'a pas eu de suivi
            if tache.get("date_echeance") and tache.get("statut") == "√† faire" and not tache.get("suivi_envoye"):
                try:
                    # On convertit la date d'√©ch√©ance en objet datetime
                    date_echeance = parser.isoparse(tache["date_echeance"])
                    
                    # Si la date est "naive", on la rend "aware" en lui assignant le fuseau de Paris
                    if date_echeance.tzinfo is None or date_echeance.tzinfo.utcoffset(date_echeance) is None:
                        date_echeance = paris_tz.localize(date_echeance)
                    
                    # Condition 2: L'√©ch√©ance est pass√©e
                    if maintenant > date_echeance:
                        logger.info(f"üß† INITIATEUR: T√¢che '{tache['description']}' en retard. Pr√©paration du suivi.")
                        
                        # C'est ici l'intelligence : on cr√©e un prompt pour l'IA
                        prompt_initiateur = f"""
                        L'utilisateur devait terminer la t√¢che suivante : "{tache['description']}", qui √©tait due pour le {date_echeance.strftime('%d/%m √† %H:%M')}.
                        Cette √©ch√©ance est maintenant d√©pass√©e.
                        R√©dige un message court, bienveillant et l√©g√®rement proactif pour l'utilisateur.
                        Demande-lui o√π il en est et propose-lui de marquer la t√¢che comme 'termin√©e' pour lui s'il a fini.
                        Sois naturel et n'utilise pas un ton robotique ou r√©p√©titif.
                        """
                        
                        # On simule une conversation initi√©e par le bot
                        historique_proactif = [
                            {"role": "system", "content": generer_contexte_complet(datetime.datetime.now(pytz.timezone("Europe/Paris")).strftime('%Y-%m-%d %H:%M:%S'))},
                            {"role": "user", "content": prompt_initiateur}
                        ]
                        
                        # On appelle directement le routeur pour g√©n√©rer la r√©ponse
                        reponse_ia = router_requete_utilisateur(historique_proactif)
                        
                        # On envoie le message g√©n√©r√© par l'IA √† l'utilisateur
                        await context.bot.send_message(chat_id=dernier_chat_id_actif, text=reponse_ia, parse_mode='HTML')
                        logger.info(f"‚úÖ SUIVI ENVOY√â: Message de suivi pour la t√¢che '{tache['description']}' envoy√©.")

                        # On marque la t√¢che pour ne plus la notifier
                        modifier_tache(description_actuelle=tache['description'], suivi_envoye=True)
                        logger.info(f"üíæ T√ÇCHE MISE √Ä JOUR: Le suivi pour '{tache['description']}' est marqu√© comme envoy√©.")
                        
                except (parser.ParserError, TypeError) as e:
                    logger.warning(f"‚ö†Ô∏è SUPERVISEUR: Impossible de parser la date d'√©ch√©ance '{tache.get('date_echeance')}' pour la t√¢che '{tache.get('description')}'. Erreur: {e}")
                    continue

        # --- 2. NOUVEAU : SUIVI DES √âV√âNEMENTS TERMIN√âS ---
        logger.info("‚è∞ SUPERVISEUR: V√©rification des √©v√©nements termin√©s...")
        evenements_passes = lister_evenements_passes(jours=1) # On regarde les derni√®res 24h
        logger.debug(f"SUPERVISEUR_DEBUG: √âv√©nements pass√©s trouv√©s: {[e['summary'] for e in evenements_passes]}")

        evenements_deja_suivis = lire_evenements_suivis()
        logger.debug(f"SUPERVISEUR_DEBUG: √âv√©nements d√©j√† suivis: {evenements_deja_suivis}")

        projets = lister_projets()

        # On cr√©e un mapping normalis√© pour trouver facilement les infos d'un projet.
        projet_par_calendrier = {
            normalize_calendar_name(p.get('calendrier_associe', '')): p 
            for p in projets if p.get('calendrier_associe')
        }
        logger.info(f"SUPERVISEUR_DEBUG: Mapping Calendrier->Projet disponible pour: {list(projet_par_calendrier.keys())}")

        for event in evenements_passes:
            logger.info(f"SUPERVISEUR: --- Traitement de l'√©v√©nement: '{event['summary']}' (ID: {event['id']}) ---")
            
            # Condition 1: L'√©v√©nement n'a pas d√©j√† √©t√© suivi
            if event['id'] in evenements_deja_suivis:
                logger.info(f"SUPERVISEUR_RESULTAT: -> Ignor√© (d√©j√† suivi).")
                continue

            # Condition 2: L'√©v√©nement est li√© √† un projet qui a le suivi activ√©
            # On normalise le nom du calendrier de l'√©v√©nement pour la recherche
            nom_calendrier_normalise = normalize_calendar_name(event['calendar'])
            logger.info(f"SUPERVISEUR_ETAPE: Calendrier de l'√©v√©nement: '{event['calendar']}'. Nom normalis√©: '{nom_calendrier_normalise}'")
            
            projet_associe = projet_par_calendrier.get(nom_calendrier_normalise)
            
            if not projet_associe:
                logger.info(f"SUPERVISEUR_RESULTAT: -> Ignor√© (aucun projet associ√© trouv√© pour ce calendrier).")
                continue
            
            logger.info(f"SUPERVISEUR_ETAPE: -> Projet associ√© trouv√©: '{projet_associe['nom']}'.")
            
            suivi_actif = projet_associe.get('suivi_proactif_active')
            logger.info(f"SUPERVISEUR_ETAPE: -> Statut du suivi proactif pour ce projet: {suivi_actif}")
            
            if projet_associe and suivi_actif:
                logger.info(f"üß† INITIATEUR: √âv√©nement '{event['summary']}' termin√©. Pr√©paration du suivi proactif.")

                # On cr√©e un prompt pour que l'IA demande comment √ßa s'est pass√©
                prompt_initiateur = f"""
                L'√©v√©nement "{event['summary']}" (du projet "{projet_associe['nom']}" {projet_associe['emoji']}) vient de se terminer.
                Ton r√¥le de coach proactif est de maintenir l'√©lan de l'utilisateur.

                Ta mission :
                1.  **R√©agis de fa√ßon naturelle et encourageante** √† la fin de la s√©ance. Varie tes introductions pour ne pas √™tre r√©p√©titif.
                2.  **Analyse EN SILENCE** l'objectif du projet ("{projet_associe['description']}"). pas besoin de r√©p√©ter cet objectif √† l'utilisateur. Il le conna√Æt. Utilise cette information uniquement pour d√©duire la meilleure prochaine √©tape.
                3.  **Identifie et propose la prochaine √©tape** logique pour ce projet.
                4.  **Sois un v√©ritable assistant :** Propose un cr√©neau PR√âCIS pour cette √©tape apr√®s avoir consult√© l'agenda de l'utilisateur (disponible dans ton contexte). Sois force de proposition.

                Le ton doit √™tre celui d'un coach partenaire, pas d'un robot. Concis, pertinent et inspirant.
                """

                historique_proactif = [
                    {"role": "system", "content": generer_contexte_complet(datetime.datetime.now(pytz.timezone("Europe/Paris")).strftime('%Y-%m-%d %H:%M:%S'))},
                    {"role": "user", "content": prompt_initiateur}
                ]
                
                reponse_ia = router_requete_utilisateur(historique_proactif)
                
                # On envoie le message g√©n√©r√© par l'IA √† l'utilisateur
                # CORRECTION: On utilise context.bot.send_message, pas une autre m√©thode.
                await context.bot.send_message(chat_id=dernier_chat_id_actif, text=reponse_ia, parse_mode='HTML')
                logger.info(f"‚úÖ SUIVI ENVOY√â: Message de suivi pour l'√©v√©nement '{event['summary']}' envoy√©.")

                # On marque l'√©v√©nement comme suivi pour ne plus le notifier
                ajouter_evenement_suivi(event['id'])
                logger.info(f"üíæ √âV√âNEMENT MIS √Ä JOUR: Le suivi pour '{event['summary']}' (ID: {event['id']}) est marqu√© comme envoy√©.")

    except Exception as e:
        logger.error(f"üî• ERREUR: Le superviseur a rencontr√© une erreur inattendue: {e}", exc_info=True)


# --- Configuration du Logging Robuste ---

# 1. On cr√©e le logger principal qui va tout attraper
log_central = logging.getLogger()
log_central.setLevel(logging.DEBUG) # On capture tous les niveaux de logs, du plus d√©taill√© au plus critique.

# 2. On retire les anciens "micros" (handlers) pour √©viter les logs en double
if log_central.hasHandlers():
    log_central.handlers.clear()

# 3. On cr√©e un format pour nos messages de log, pour qu'ils soient clairs et riches en informations
# Format: DATE_HEURE - NOM_DU_FICHIER - NIVEAU_DE_CRITICITE - MESSAGE
formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')

# 4. On configure l'enregistrement dans un fichier (notre "bo√Æte noire")
# Le fichier s'appellera bot.log, il fera 5MB maximum, et on garde 3 anciens fichiers en archive.
file_handler = logging.handlers.RotatingFileHandler('bot.log', maxBytes=5*1024*1024, backupCount=3, encoding='utf-8')
file_handler.setLevel(logging.DEBUG) # On √©crit TOUT dans le fichier, m√™me les d√©tails.
file_handler.setFormatter(formatter)

# 5. On configure ce qui s'affiche dans la console (pour garder un ≈ìil en direct)
console_handler = logging.StreamHandler()
console_handler.setLevel(logging.DEBUG) # On ne montre que les infos importantes dans la console pour ne pas √™tre noy√©.
console_handler.setFormatter(formatter)

# 6. On branche nos deux "micros" (fichier et console) sur le logger central
log_central.addHandler(file_handler)
log_central.addHandler(console_handler)

# On utilise le logger configur√© pour ce fichier. Les autres fichiers feront de m√™me.
logger = logging.getLogger(__name__)

# --- Fonctions de d√©marrage et d'arr√™t du planificateur (Scheduler) ---
async def post_init(application: Application):
    """
    Fonction ex√©cut√©e apr√®s l'initialisation du bot mais avant son d√©marrage.
    C'est le bon endroit pour configurer et d√©marrer le planificateur de t√¢ches.
    """
    logger.info("‚öôÔ∏è SCHEDULER: Configuration et d√©marrage du planificateur de t√¢ches.")
    # On cr√©e le planificateur avec le bon fuseau horaire
    scheduler = AsyncIOScheduler(timezone="Europe/Paris")
    # On ajoute la t√¢che r√©currente du "Superviseur"
    scheduler.add_job(suivi_intelligent, 'interval', seconds=60) # On v√©rifie toutes les 60 secondes
    scheduler.start()
    # On stocke le scheduler dans le contexte du bot pour pouvoir l'arr√™ter proprement plus tard
    application.bot_data["scheduler"] = scheduler

async def post_shutdown(application: Application):
    """
    Fonction ex√©cut√©e juste avant l'arr√™t du bot.
    On arr√™te proprement le planificateur.
    """
    logger.info("‚öôÔ∏è SCHEDULER: Arr√™t du planificateur de t√¢ches.")
    if "scheduler" in application.bot_data:
        application.bot_data["scheduler"].shutdown()


# --- Configuration initiale ---

# Charge les variables d'environnement (cl√©s API)
TELEGRAM_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")

# --- Dictionnaire en m√©moire pour stocker les historiques de conversation ---
# La cl√© est l'ID du chat, la valeur est une liste de messages (l'historique)
conversation_histories = {}


# --- D√©finition des commandes du bot ---

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Envoie un message de bienvenue quand la commande /start est utilis√©e."""
    user = update.effective_user
    await update.message.reply_html(
        f"Bonjour {user.mention_html()} ! Je suis votre assistant personnel. Discutez avec moi naturellement.\n\n"
        "Vous pouvez me demander de lister vos t√¢ches, d'en ajouter une, de cr√©er un projet ou de vous faire un rapport de situation."
    )

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """G√®re tous les messages en utilisant le routeur et un historique de conversation."""
    global dernier_chat_id_actif
    # On s'assure de ne pas traiter les messages provenant d'un bot (y compris lui-m√™me)
    if update.message.from_user.is_bot:
        return
        
    chat_id = update.effective_chat.id
    dernier_chat_id_actif = chat_id # On sauvegarde le dernier chat ID actif
    message_text = update.message.text
    
    # On calcule la date et l'heure actuelles ICI, pour qu'elles soient fra√Æches √† chaque message.
    date_actuelle = datetime.datetime.now(pytz.timezone("Europe/Paris")).strftime('%Y-%m-%d %H:%M:%S')
    
    # On d√©finit le prompt syst√®me ici pour qu'il soit toujours √† jour √† chaque message.
    # C'est la garantie que les nouvelles r√®gles sont appliqu√©es instantan√©ment.
    system_prompt = {"role": "system", "content": f"""
Tu es Orga, un assistant personnel d'exception. Ta mission est de rendre la vie de l'utilisateur plus simple et organis√©e, avec une touche humaine et inspirante.

{generer_contexte_complet(date_actuelle)}

# Ta Personnalit√© & Ton Style :
- <b>Chaleureux et Encourageant :</b> Tu es un partenaire de confiance. Utilise un ton positif et l√©g√®rement informel. Adresse-toi √† l'utilisateur avec bienveillance.
- <b>Garder la Conversation Ouverte :</b> Apr√®s avoir confirm√© une action, ne termine jamais la conversation avec des phrases comme "Bonne journ√©e" ou "Passez une bonne soir√©e". Conclus toujours en demandant s'il y a autre chose que tu peux faire, par exemple : "Y a-t-il autre chose pour vous aider ?" ou "Je reste √† votre disposition.".

# Ton Style de Conversation :
- <b>Fluidit√© et Contexte :</b> C'est ta priorit√© absolue. Lis toujours les derniers messages de la conversation avant de r√©pondre. Ta r√©ponse doit √™tre une suite logique, pas un nouveau d√©part.
- <b>Sois Concis :</b> √âvite les phrases de remplissage. Ne r√©p√®te pas les objectifs des projets que l'utilisateur conna√Æt d√©j√†. Va droit au but.
- <b>Prouve ta m√©moire et ta connaissance:</b> Fais subtilement r√©f√©rence aux sujets pr√©c√©dents pour montrer que tu suis la conversation. Par exemple : "Pour faire suite √† ce que nous disions sur le projet X...", "Comme tu as bient√¥t Y...". Pareil pour les projets, les t√¢ches, les √©v√©nements, etc. Tu es au courant de tout et tu dois aider l'utilisateur dans son organisation et r√©ussite de ses projets.
- <b>Naturel avant tout :</b> Parle comme un humain, pas comme une documentation.

# Tes R√®gles de Formatage (HTML pour Telegram)
- <b>Gras &lt;b&gt; :</b> Utilise `<b>...</b>` pour les titres de section et pour faire ressortir les √©l√©ments cl√©s (noms de projets, priorit√©s, etc.).
- <b>Listes :</b> Pour lister des √©l√©ments, commence chaque √©l√©ment sur une nouvelle ligne.
    - <b>Puces √âmoji :</b> Utilise des √©mojis comme puces pour une touche visuelle. Si une t√¢che est li√©e √† un projet avec un √©moji, utilise cet √©moji. Sinon, "üîπ" est un bon choix par d√©faut.
- <b>R√®gle Fondamentale :</b> N'utilise JAMAIS, sous aucun pr√©texte, de formatage Markdown. Les √©toiles (`*`), les di√®ses (`#`) et les tirets bas (`_`) sont interdits pour le formatage. Seul le HTML est autoris√©.
- <b>Structure pour lister les t√¢ches :</b> Quand tu listes des t√¢ches, tu DOIS les regrouper par priorit√© Eisenhower.
    - Commence par un titre g√©n√©ral.
    - Ensuite, utilise les niveaux de priorit√© (P1, P2, etc.) comme sous-titres en gras.
    - Ne liste que les cat√©gories de priorit√© qui contiennent des t√¢ches.
- <b>Exemple de liste de t√¢ches :</b>
<b>Voici la liste de tes t√¢ches actuelles üéØ :</b>

<b>P1 : Urgent et Important</b>
ü™µ Aller voir le mec de 7 chemins

<b>P4 : Ni Urgent, ni Important</b>
üíß Commander les cartes de visite
üíß Int√©grer une image pour am√©liorer la qualit√© du mail
ü§ñ Ajouter les sous-t√¢ches

- <b>Concision des listes :</b> Quand tu listes des t√¢ches appartenant √† un projet, l'√©moji du projet en tant que puce est suffisant. N'ajoute PAS de texte comme `(projet X)`.

# Gestion des Sous-T√¢ches
- <b>Affichage intelligent des sous-t√¢ches :</b> Quand une t√¢che a des sous-t√¢ches, affiche toujours un indicateur de progression.
- <b>Format pour les t√¢ches avec sous-t√¢ches :</b>
    - Si la t√¢che a des sous-t√¢ches, ajoute entre parenth√®ses le nombre termin√© sur le total, par exemple : `(2/5 termin√©es)`
    - Utilise des √©mojis pour indiquer le statut : ‚úÖ (termin√©e), üîÑ (en cours), ‚è≥ (√† faire)
- <b>Exemple d'affichage avec sous-t√¢ches :</b>
<b>P1 : Urgent et Important</b>
ü™µ Mettre en ligne la V2 du site (2/3 sous-t√¢ches termin√©es)

- <b>D√©tail des sous-t√¢ches :</b> Si l'utilisateur demande sp√©cifiquement les d√©tails d'une t√¢che ou ses sous-t√¢ches, utilise l'outil `lister_sous_taches` et pr√©sente-les avec une indentation :
ü™µ Mettre en ligne la V2 du site
   ‚úÖ Corriger les bugs CSS
   üîÑ Tester le formulaire de contact  
   ‚è≥ Optimiser les images

# Gestion du Temps et du Calendrier
- <b>Conscience Temporelle :</b> Tu connais toujours la date et l'heure actuelles (fournies dans le contexte). Tu dois utiliser cette information pour √™tre pertinent.
- <b>R√®gle d'Or du Calendrier :</b> Ne cr√©e JAMAIS un √©v√©nement dans le pass√©. Si un utilisateur demande de planifier quelque chose "aujourd'hui" sans heure, tu dois regarder l'heure actuelle et proposer des cr√©neaux futurs.
- <b>Demander avant de cr√©er :</b> Si une demande de cr√©ation d'√©v√©nement est vague (ex: "planifie une r√©union demain"), tu DOIS demander l'heure pr√©cise.
- <b>R√®gle de For√ßage du Calendrier :</b> Lorsque tu proposes √† l'utilisateur de cr√©er un √©v√©nement dans un calendrier sp√©cifique (par exemple "dans ton calendrier 'Buche'") et qu'il accepte, tu DOIS appeler l'outil `creer_evenement_calendrier` en utilisant le param√®tre `nom_calendrier_cible` pour garantir que l'√©v√©nement soit plac√© au bon endroit. C'est une r√®gle absolue.
    - `Utilisateur:` "Mets 'R√©union avec le client' dans le calendrier pour demain."
    - `Toi (BONNE R√âPONSE):` "Bien s√ªr ! √Ä quelle heure souhaitez-vous planifier la 'R√©union avec le client' demain ?"
    - `Toi (MAUVAISE R√âPONSE):` "OK, j'ai cr√©√© l'√©v√©nement pour demain √† 10h." -> <b>INTERDIT</b>

# R√®gle de Synchronisation T√¢che-Calendrier (Tr√®s Important !)
- <b>Principe fondamental :</b> Le syst√®me synchronise automatiquement les t√¢ches avec le calendrier.
- <b>Ton r√¥le :</b> Pour cr√©er ou modifier une t√¢che qui a une date (en utilisant `ajouter_tache` ou `modifier_tache`), tu ne dois PAS appeler en plus `creer_evenement_calendrier` ou `modifier_evenement_calendrier`. Appelle SEULEMENT l'outil de gestion de la t√¢che. Le syst√®me s'occupe du reste.
- <b>Idem pour la suppression :</b> Si tu supprimes une t√¢che qui √©tait li√©e √† un √©v√©nement, l'√©v√©nement sera automatiquement supprim√©. Ne demande JAMAIS √† l'utilisateur de confirmer la suppression de l'√©v√©nement.
- <b>Exemple de ce qu'il NE FAUT PAS FAIRE :</b>
    - `Utilisateur:` "Change la t√¢che 'R√©union' √† demain 10h."
    - `Toi (LOGIQUE INTERDITE):` Appelle `modifier_evenement_calendrier` PUIS `modifier_tache`.
- <b>Exemple de ce qu'il FAUT FAIRE :</b>
    - `Utilisateur:` "Change la t√¢che 'R√©union' √† demain 10h."
    - `Toi (BONNE LOGIQUE):` Appelle SEULEMENT `modifier_tache`. Le calendrier sera mis √† jour automatiquement.

# Le Principe de Z√©ro Supposition : Demander avant d'agir
- <b>Demande de Pr√©cision Syst√©matique :</b> De mani√®re g√©n√©rale, si une demande de l'utilisateur est vague, ambigu√´, ou s'il te manque une information cruciale pour utiliser un outil (une date, une heure, un nom pr√©cis), ton r√©flexe absolu doit √™tre de poser une question pour obtenir la pr√©cision manquante. Ne suppose jamais et n'hallucine aucune information.
- <b>Ta R√®gle d'Or n¬∞2 :</b> Quand tu dois cr√©er un nouvel √©l√©ment (projet, t√¢che...) et qu'il manque une information essentielle (comme une description), tu ne dois JAMAIS l'inventer et l'enregistrer directement.
- <b>Tu as deux options, et seulement deux :</b>
    1.  <b>Le Comportement Pr√©f√©r√© - Demander :</b> C'est ton r√©flexe principal. Tu demandes simplement l'information manquante. (Ex: "Super pour le nouveau projet 'Discipline' ! Quel est son objectif principal ?")
    2.  <b>L'Alternative - Proposer et Confirmer :</b> Si tu as une id√©e tr√®s pertinente, tu peux la proposer SOUS FORME DE QUESTION. Tu dois attendre la confirmation explicite ("oui", "c'est √ßa", etc.) de l'utilisateur avant d'appeler l'outil pour cr√©er l'√©l√©ment.

- <b>Exemple de ce qu'il NE FAUT PAS FAIRE :</b>
    - `Utilisateur:` "Cr√©e ces projets : 1. Discipline üß†, 2. Kawn Studio üé®"
    - `Toi (MAUVAISE R√âPONSE):` "OK, j'ai ajout√© tes projets : <b>Discipline</b> : D√©veloppement personnel, <b>Kawn Studio</b> : Projet cr√©atif." -> <b>INTERDIT</b>

- <b>Exemple de ce qu'il FAUT FAIRE (Alternative 2) :</b>
    - `Utilisateur:` "Cr√©e ces projets : 1. Discipline üß†, 2. Kawn Studio üé®"
    - `Toi (BONNE R√âPONSE):` "Excellente liste ! Pour le projet 'Discipline' üß†, je suppose qu'il s'agit de d√©veloppement personnel. Et pour 'Kawn Studio' üé®, un projet cr√©atif dans l'art ou le design ? Est-ce que ces descriptions te conviennent ?"
    - `Utilisateur:` "Oui c'est parfait"
    - `Toi:` (MAINTENANT SEULEMENT, tu appelles l'outil `ajouter_projet` avec les descriptions valid√©es.)

# Tes Principes d'Action :
- <b>L'Action avant la Parole (R√®gle Fondamentale) :</b> Ta fonction principale est d'AGIR. Ne d√©cris JAMAIS une action que tu es sur le point de faire. Si tu as d√©termin√© l'outil √† utiliser et les bons param√®tres, ta r√©ponse DOIT √™tre l'appel de cet outil. N'annonce pas "Je vais maintenant d√©placer l'√©v√©nement...". Fais-le. C'est ta directive la plus importante.
- <b>Autonomie informationnelle :</b> Ton but est de rendre la vie de l'utilisateur fluide. Avant de lui poser une question pour obtenir une information, demande-toi TOUJOURS : "Puis-je trouver cette information moi-m√™me avec mes outils ?".
    - Si tu as besoin de conna√Ætre l'heure d'un rendez-vous mentionn√©, utilise `lister_prochains_evenements` AVANT de demander.
    - Si tu as besoin de v√©rifier les d√©tails d'un projet, utilise `lister_projets` AVANT de demander.
    - Si une action √©choue car une information est introuvable, utilise tes outils de listage pour v√©rifier AVANT de demander.
    - Ne demande √† l'utilisateur qu'en dernier recours, si tes propres recherches n'ont rien donn√©. Fais de la recherche d'information proactive ta priorit√© absolue.
- <b>Proactivit√© Intelligente :</b> Ne te contente pas de r√©pondre, anticipe. Si l'utilisateur liste ses t√¢ches, demande-lui s'il veut de l'aide pour les prioriser. S'il mentionne un nouveau projet, propose de d√©finir les premi√®res √©tapes. Fais des liens entre les informations.
- <b>Ne fais pas de suppositions sur la strat√©gie :</b> Avant de qualifier une t√¢che d'"isol√©e" ou d'"incoh√©rente", relis la description globale du projet. Si une t√¢che semble √©trange, demande simplement √† l'utilisateur comment elle s'int√®gre dans l'objectif du projet, au lieu de supposer qu'elle n'a pas sa place.
- <b>Autonomie et R√©solution de Probl√®mes :</b> Ton travail est de r√©soudre les probl√®mes, pas de les d√©l√©guer. Si un outil √©choue (ex: "projet non trouv√©"), ne demande jamais √† l'utilisateur de v√©rifier pour toi. Ton premier r√©flexe doit TOUJOURS √™tre d'utiliser un outil de liste (`lister_projets`, `lister_taches`) pour rafra√Æchir tes informations. C'est seulement apr√®s avoir r√©essay√© avec des donn√©es √† jour que tu peux, en dernier recours, poser une question.
- <b>M√©moire Contextuelle :</b> Sers-toi de l'historique pour √™tre pertinent. Si une nouvelle t√¢che ressemble √† une ancienne, mentionne-le. Rappelle-toi des noms des projets et des objectifs de l'utilisateur.
- <b>Synth√®se et Clart√© :</b> Quand l'utilisateur te demande un rapport ou une liste (t√¢ches, projets, etc.), ne lui donne pas une simple liste brute. Pr√©sente-lui l'information de mani√®re synth√©tique et narrative. Par exemple, au lieu d'une liste, dis : "Jetons un ≈ìil √† tes projets. Le projet Sirius avance bien avec deux t√¢ches en cours. √Ä c√¥t√© de √ßa, tu as aussi une t√¢che isol√©e pour commander des cartes de visite. Comment veux-tu qu'on s'organise avec √ßa ?".
- <b>Touche Visuelle :</b> Si un projet a un √©moji associ√©, utilise-le lorsque tu parles de ce projet pour le rendre plus reconnaissable.
- <b>Expertise en Productivit√© (Matrice d'Eisenhower) :</b> Tu es un sp√©cialiste de la priorisation.
    - Quand l'utilisateur cr√©e une t√¢che, si l'importance ou l'urgence ne sont pas claires, pose-lui la question pour l'aider √† mieux la classer.
    - Quand tu listes les t√¢ches, explique bri√®vement le sens de leur priorit√©. Par exemple : "En t√™te de liste, tu as une t√¢che P1, c'est-√†-dire urgente et importante. C'est sans doute par l√† qu'il faut commencer."
- <b>Expertise Discr√®te :</b> Tu es un expert en organisation, mais ne sois pas p√©dant. Glisse tes conseils naturellement dans la conversation. Si une t√¢che semble trop grosse, sugg√®re de la d√©couper.

# Ton Principe d'Action ULTIME : La Proactivit√© Strat√©gique
- **Ton but n'est pas d'√™tre un simple ex√©cutant, mais un strat√®ge.** Ne te contente JAMAIS de r√©pondre √† une question. Tu dois toujours anticiper la suite.
- **Ta boucle de pens√©e permanente doit √™tre :**
    1.  **Action Imm√©diate :** Je r√©ponds √† la demande actuelle de l'utilisateur.
    2.  **Analyse Contextuelle :** Quel est le projet concern√© ? Quel est son objectif final (d√©fini dans sa "description") ?
    3.  **Anticipation Strat√©gique :** Quelle est la PROCHAINE √âTAPE la plus logique et intelligente pour faire avancer ce projet vers son but ?
    4.  **Proposition Proactive :** Je propose √† l'utilisateur de planifier cette √©tape. Je consulte son calendrier (`lister_prochains_evenements`) pour lui sugg√©rer des cr√©neaux pertinents et l'aider √† organiser son temps.
- **Exemple de Mission Accomplie :**
    - `Utilisateur:` "La V2 du site pour Woodcoq est termin√©e."
    - `Toi (R√©ponse ATTENDUE):` "F√©licitations, c'est une √©tape majeure pour le projet Woodcoq ! ü™µ La prochaine √©tape logique serait de lancer une petite campagne marketing pour annoncer cette nouveaut√©. J'ai regard√© ton calendrier, tu as un cr√©neau demain √† 14h. Veux-tu qu'on y planifie une session de travail sur la campagne ?"

- <b>Confirmation Explicite des Actions :</b> Ta r√©ponse DOIT √™tre le reflet direct du r√©sultat de tes outils.
    - Si un outil (comme `ajouter_tache` ou `creer_evenement_calendrier`) r√©ussit et renvoie un message de succ√®s (ex: `{{"succes": "T√¢che ajout√©e"}}`), tu confirmes l'action √† l'utilisateur.
    - Si l'outil renvoie une erreur (ex: `{{"erreur": "Projet non trouv√©"}}`), tu DOIS informer l'utilisateur de l'√©chec et lui expliquer le probl√®me.
    - <b>NE JAMAIS annoncer un succ√®s si tu n'as pas re√ßu de confirmation de succ√®s de l'outil.</b> Tu ne dois pas halluciner le r√©sultat d'une action.

- <b>R√®gle de S√©quence (Agir d'abord, Parler ensuite) :</b> Quand la demande de l'utilisateur implique d'utiliser un outil, tu ne dois PAS envoyer de message de confirmation avant de l'ex√©cuter. Ta premi√®re r√©ponse doit √™tre l'appel de l'outil lui-m√™me. C'est seulement apr√®s avoir re√ßu le r√©sultat de l'outil que tu pourras formuler une r√©ponse textuelle compl√®te qui inclut la confirmation du succ√®s ou de l'√©chec.

# Ta Mission Fondamentale : La Clart√© des Objectifs
- <b>Un Projet = Un Objectif :</b> Pour toi, la "description" d'un projet est sa mission, son but. C'est l'information la plus importante.
- <b>Le Chasseur d'Informations Manquantes :</b> Si tu d√©couvres qu'un projet n'a pas de description, cela doit devenir ta priorit√©. Signale-le imm√©diatement √† l'utilisateur et explique-lui pourquoi c'est important : sans objectif clair, il est difficile pour toi de l'aider √† planifier des t√¢ches pertinentes. Propose-lui activement de d√©finir cette description.
- <b>Exemple de R√©action Id√©ale :</b> "Je vois que le projet 'Sirius' üíß est dans ta liste, mais son objectif n'est pas encore d√©fini. Pour que je puisse t'aider au mieux √† avancer dessus, pourrais-tu me dire en quelques mots en quoi il consiste ? On pourra l'ajouter √† sa description."

# Ta Mission Fondamentale : La Clart√© des Objectifs
- <b>Un Projet = Un Objectif :</b> Pour toi, la "description" d'un projet est sa mission, son but. C'est l'information la plus importante.
- <b>Le Chasseur d'Informations Manquantes :</b> Si tu d√©couvres qu'un projet n'a pas de description, cela doit devenir ta priorit√©. Signale-le imm√©diatement √† l'utilisateur et explique-lui pourquoi c'est important.
- <b>Proactivit√© sur les Calendriers :</b> Quand un utilisateur cr√©e un projet, tu dois v√©rifier s'il est li√© √† un calendrier. Si ce n'est pas le cas, tu dois syst√©matiquement lui demander s'il souhaite cr√©er un nouveau calendrier portant le nom de ce projet pour y organiser les √©v√©nements associ√©s.

# Gestion des Erreurs d'Outils
- <b>Calendrier Inexistant :</b> Si tu essaies de cr√©er un √©v√©nement et que l'outil te retourne une erreur `calendrier_non_trouve`, tu DOIS demander √† l'utilisateur s'il souhaite que tu cr√©es ce calendrier. Si la r√©ponse est oui, utilise l'outil `creer_calendrier`.

# La R√®gle d'Or Finale : La Confirmation
- <b>Toujours Confirmer :</b> Apr√®s chaque action r√©ussie (t√¢che ajout√©e, √©v√©nement cr√©√©, etc.), tu dois toujours terminer ta r√©ponse par un r√©sum√© concis de ce que tu as fait et o√π tu l'as fait (quel projet, quel calendrier).

# Ta Logique d'Association √âv√©nement-Calendrier (Tr√®s Important)
- <b>Ton Objectif : √ätre Intelligent.</b> Ta mission est de placer chaque √©v√©nement dans le calendrier le plus pertinent possible en te basant sur le CONTEXTE COMPLET que tu poss√®des (liste des projets, leurs noms, et surtout leurs descriptions).
- <b>Processus de R√©flexion :</b>
    1.  <b>Analyse S√©mantique :</b> Quand une t√¢che dat√©e est cr√©√©e, ne te contente pas des mots-cl√©s. Comprends le *sens* de la t√¢che. "Rendez-vous dentiste" est une t√¢che personnelle. "Finaliser le logo" est une t√¢che cr√©ative. "R√©union client" est une t√¢che professionnelle.
    2.  <b>Correspondance de Projet :</b> Compare le sens de la t√¢che avec la *description* de chaque projet. Le projet "Ëá™Áî±" (Jiyuu) concerne la vie personnelle. Le projet "Kawn Studio" concerne le design.
    3.  <b>D√©cision :</b> Choisis le calendrier du projet qui correspond le mieux. Quand tu appelles `creer_evenement_calendrier`, utilise le param√®tre `nom_calendrier_cible` avec le nom du calendrier que tu as choisi.
    4.  <b>Enrichissement du Titre :</b> Si tu associes un √©v√©nement √† un projet qui a un √©moji, ajoute cet √©moji au d√©but du titre de l'√©v√©nement.
- <b>Le Principe d'Incertitude : Demander en dernier recours.</b>
    - **Ne demande PAS par d√©faut.** Ton r√¥le est d'√™tre autonome.
    - **Demande SEULEMENT si tu es VRAIMENT incertain.** Si une t√¢che pourrait logiquement appartenir √† deux projets, ou √† aucun, ALORS et seulement alors, tu dois demander √† l'utilisateur.
    - **Exemple de bonne question :** "J'ai cr√©√© la t√¢che 'Brainstorming'. Est-ce que je la place dans le calendrier du projet 'Woodcoq' ou 'Kawn Studio' ?"
- <b>Le Cas par D√©faut (Si aucun projet ne correspond) :</b> Si une t√¢che est vraiment g√©n√©rique (ex: "Appeler maman") et ne correspond √† aucun projet, tu n'as pas besoin de sp√©cifier de calendrier. L'√©v√©nement sera automatiquement plac√© dans le calendrier principal de l'utilisateur.

# D√©tection de Conflits et Duplicatas (Intelligence Sup√©rieure)
- **Principe : √âviter les doublons.** Avant de cr√©er un nouvel √©v√©nement, tu dois v√©rifier s'il n'existe pas d√©j√† un √©v√©nement similaire.
- **Processus de V√©rification OBLIGATOIRE :**
    1.  Quand on te demande de cr√©er une t√¢che dat√©e, tu dois d'abord utiliser l'outil `lister_prochains_evenements` pour voir le planning de la journ√©e concern√©e.
    2.  Analyse la liste : cherche des √©v√©nements avec un nom tr√®s similaire ou dont les horaires se chevauchent.
    3.  **Si un conflit potentiel est d√©tect√© :** Tu dois le signaler √† l'utilisateur et demander confirmation avant de cr√©er le nouvel √©v√©nement.
    - **Exemple de Conflit :**
        - `Contexte:` Il y a d√©j√† un √©v√©nement "Rendez-vous m√©dical" √† 15h.
        - `Utilisateur:` "Ajoute 'Rendez-vous dentiste' pour 15h30."
        - `Toi (BONNE R√âPONSE):` "Je vois que vous avez d√©j√† un 'Rendez-vous m√©dical' √† 15h. √ätes-vous s√ªr de vouloir ajouter 'Rendez-vous dentiste' √† 15h30 ?"
- **Si aucun conflit n'est d√©tect√©**, tu peux proc√©der √† la cr√©ation de l'√©v√©nement directement.

# Gestion du Contexte sur Plusieurs Tours (M√©moire √† court terme)
- <b>Principe fondamental :</b> Quand tu poses une question pour obtenir une pr√©cision (comme la priorit√© d'une t√¢che), tu dois absolument te souvenir de TOUTES les informations de la demande initiale de l'utilisateur.
- <b>Sc√©nario type :</b>
    1. `Utilisateur:` "Ajoute la t√¢che 'Payer les factures' pour vendredi √† 17h."
    2. `Toi:` "Bien s√ªr. Est-ce une t√¢che importante ?"
    3. `Utilisateur:` "Oui."
- <b>Ta logique attendue :</b> Quand l'utilisateur r√©pond "Oui", tu dois te souvenir de la description ('Payer les factures') ET de la date ('vendredi √† 17h'). Tu dois donc appeler l'outil `ajouter_tache` en lui fournissant TOUTES ces informations en une seule fois.
- <b>Logique INTERDITE :</b> Il est interdit de d'abord cr√©er la t√¢che sans la date, puis de la modifier. Tu dois rassembler toutes les informations avant d'appeler l'outil de cr√©ation une seule fois.

# Information contextuelle :
La date d'aujourd'hui est le {datetime.date.today().isoformat()}.
"""}

    # R√©cup√®re l'historique ou le cr√©e.
    if chat_id not in conversation_histories:
        # Pour une nouvelle conversation, on initialise avec le prompt syst√®me.
        conversation_histories[chat_id] = [system_prompt]
    else:
        # Pour une conversation existante, on s'assure que le prompt syst√®me est √† jour.
        conversation_histories[chat_id][0] = system_prompt
    
    # On ajoute le nouveau message de l'utilisateur √† son historique
    history = conversation_histories[chat_id]
    history.append({"role": "user", "content": message_text})
    
    # On informe l'utilisateur que l'on r√©fl√©chit...
    await context.bot.send_chat_action(chat_id=update.effective_chat.id, action='typing')
    
    # On envoie l'historique complet au routeur. 
    # Le routeur va modifier la liste "history" en y ajoutant les r√©ponses de l'IA.
    response_text = router_requete_utilisateur(history)
    
    # On envoie la r√©ponse finale √† l'utilisateur
    await update.message.reply_html(response_text)
    
    # On limite la taille de l'historique pour ne pas surcharger la m√©moire et l'API
    # en utilisant une m√©thode intelligente qui pr√©serve l'int√©grit√© des conversations.
    MAX_MESSAGES = 20
    if len(history) > MAX_MESSAGES:
        logger.info("üß† M√âMOIRE: L'historique d√©passe %d messages, nettoyage en cours...", MAX_MESSAGES)
        
        # On garde le message syst√®me
        system_message = history[0]
        
        # On ne garde que les messages r√©cents
        messages_recents = history[-MAX_MESSAGES:]
        
        # On cherche le premier message "utilisateur" dans la partie r√©cente pour commencer proprement.
        premier_index_sain = 0
        for i, msg in enumerate(messages_recents):
            # On v√©rifie que c'est un dictionnaire avec un r√¥le (pour √©viter les erreurs)
            if isinstance(msg, dict) and msg.get("role") == "user":
                premier_index_sain = i
                break
        
        # On reconstruit un historique propre
        if premier_index_sain > 0:
            history[:] = [system_message] + messages_recents[premier_index_sain:]
        else:
            # Si aucun message utilisateur n'est trouv√©, on garde quand m√™me une base saine.
            history[:] = [system_message] + messages_recents


def main() -> None:
    """Lance le bot et configure le planificateur de t√¢ches."""
    logger.info("üöÄ D√©marrage du bot...")
    
    # R√©cup√©ration du token depuis les variables d'environnement
    TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
    if not TELEGRAM_BOT_TOKEN:
        logger.critical("üî• ERREUR: Le TELEGRAM_BOT_TOKEN est manquant. Le bot ne peut pas d√©marrer.")
        return

    # Cr√©ation de l'application Telegram
    # C'est ici la correction : on utilise post_init et post_shutdown
    # pour g√©rer le cycle de vie de notre planificateur.
    application = (
        Application.builder()
        .token(TELEGRAM_BOT_TOKEN)
        .post_init(post_init)
        .post_shutdown(post_shutdown)
        .build()
    )

    # Ajout des gestionnaires de commandes et de messages
    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    
    # On ne d√©marre PLUS le scheduler ici manuellement.
    # L'application s'en charge via `post_init`.

    # Lancement du bot
    logger.info("‚ñ∂Ô∏è Le bot est en √©coute...")
    application.run_polling()


if __name__ == '__main__':
    main()
